{"version":3,"sources":["assets/script/Scene/AcceEnergeRock.ts","assets/script/Player/AnimationEvent.ts","assets/script/Scene/Mechanism/BidirectionElevatorMechanism.ts","assets/script/Scene/Mechanism/FirstScene/BlockRockMachanism.ts","assets/script/Monster/BossFallenRock.ts","assets/script/Monster/BossManager.ts","assets/script/Monster/BossWeapon.ts","assets/script/Scene/Mechanism/FirstScene/BoxMechanism.ts","assets/script/Scene/Mechanism/FirstScene/BoxRigibodyControl.ts","assets/script/Scene/Mechanism/FirstScene/BridgeMechanism.ts","assets/script/Monster/BulletDamage.ts","assets/script/Monster/Bullet.ts","assets/script/Scene/Button.ts","assets/script/CameraController.ts","assets/script/Scene/Mechanism/FirstScene/CannonContact.ts","assets/script/Scene/Mechanism/FirstScene/CannonMechanism.ts","assets/script/Scene/Mechanism/FirstScene/CannonRock.ts","assets/script/Monster/ClimingMonster.ts","assets/script/Scene/Mechanism/ClockButtonMechanism.ts","assets/script/Scene/Mechanism/ClockMechanism.ts","assets/script/Scene/Mechanism/ClockPlatform.ts","assets/script/Scene/CrossFloor.ts","assets/script/Scene/DirectionRock.ts","assets/script/Scene/DirectionStone.ts","assets/script/Scene/ElevatorManager.ts","assets/script/Scene/EnergyRock.ts","assets/script/Scene/Mechanism/FirstScene/ExitRockMechanism.ts","assets/script/Scene/Mechanism/FirstScene/FakeRock.ts","assets/script/Scene/Mechanism/FirstScene/FallenRockMechanism.ts","assets/script/GameManager .ts","assets/script/Scene/Mechanism/FirstScene/GateMechanism.ts","assets/script/Scene/JaggedMechanism.ts","assets/script/Scene/Mechanism/FirstScene/LRmoveMechanism.ts","assets/script/LoadingManager.ts","assets/script/Menu/MainMenuController.ts","assets/script/Monster/MeleeAttack.ts","assets/script/Monster/MeleeMonster.ts","assets/script/Menu/MenuController.ts","assets/script/Narrator/NarratorManager.ts","assets/script/Scene/Mechanism/NormalElevatorMechanism.ts","assets/script/Player/PlayerManager.ts","assets/script/Narrator/PlotPoint.ts","assets/script/Monster/RangedMonster.ts","assets/script/Scene/RigidBodyFollowParentNode.ts","assets/script/Scene/Mechanism/RollBackMechanism.ts","assets/script/Scene/Mechanism/FirstScene/RollingRockMechanism.ts","assets/script/Scene/SceneManager.ts","assets/script/Menu/SettingPage.ts","assets/script/Scene/Mechanism/SilkMechanism.ts","assets/script/Player/SkillCast.ts","assets/script/Scene/SpecialButton.ts","assets/script/Monster/SpecialMeleeMonster.ts","assets/script/Scene/Mechanism/FirstScene/StairVechanism.ts","assets/script/Scene/StretchPlatformMechanism.ts","assets/script/Scene/TerrainGenerator.ts","assets/script/Scene/Mechanism/FirstScene/ThornMechanism.ts","assets/script/TimeEffect.ts","assets/script/Scene/Mechanism/FirstScene/TouchedMechanism.ts","assets/script/TransitionController.ts","assets/script/Scene/Mechanism/FirstScene/UDmoveMechanism.ts","assets/script/Scene/Mechanism/FirstScene/UpDownMoveRockMechanism.ts","assets/script/Scene/Mechanism/FirstScene/VineMechanism.ts","assets/script/Monster/WeaponBody.ts"],"names":["TimeEffect_1","require","_a","cc","_decorator","ccclass","property","EnergyRock","_super","__extends","_this","apply","this","arguments","energyRock","isOpen","prototype","onLoad","status","rollback","accelerate","reset","enabled","getComponent","CircleCollider","radius","slowdown","__decorate","Sprite","default","exports","PlayerManager_1","AnimationEvent","playerManager","playerAnimation","effect","accelAudio","slowAudio","rollBacklAudio","jumpAudio","walkAudio","hurtAudio","deathAudio","walkAudioID","jumpEffectID","effectAnimation","Animation","endHurt","playerState","StateSet","none","GetIsClimbing","console","log","resetClimbCount","playAdditive","endSkill","endJump","afterAccelExpend","play","afterReverseExpend","afterSlowExpend","noneEffect","accelAudioPlay","audioEngine","playEffect","slowAudioPlay","rollBackAudioPlay","walkAudioPlay","getState","AudioState","PAUSED","resume","walkAudioPause","PLAYING","pause","hurtAudioPlay","deathAudioPlay","jumpAudioPlay","Node","AudioClip","Component","SpecialButton_1","NormalElevatorMechanism","downBtn","upBtn","elevatorEffect","chains","highPosition","Vec2","lowPosition","chainHighHeight","chainLowHeight","movingSecond","remainSecond","chainOneTween","chainTwoTween","elevatorTween","isMoving","isInHighPosition","effectID","zIndex","node","on","elevatorDownward","elevatorUpward","tween","delay","call","to","y","stopEffect","start","height","stop","_b","_c","setPosition","BlockRockMechanism","rock","shrinkDuration","scale","BossFallenRock","dropSpeed","intial_y","target_y","speed","boss","onBeginContact","contact","self","other","name","destroy","scheduleOnce","children","group","PhysicsBoxCollider","sensor","currentPosition","JaggedMechanism_1","BossFallenRock_1","BossWeapon_1","Boss","player","HPDisplay","Jagged","bossPosition","Array","fallenRockPrefab","bossWeapon","axeParticleSystem","bossSprintParticleSystem","bossAnimation","axeEffect","jaggedEffect","sprintEffectOne","sprintEffectTwo","deathEffect","active","minMovePeriod","maxMovePeriod","minSkillPeriod","maxSkillPeriod","moveSpeed","bossHP","invincibleTime","currentHP","moveTimer","skillTimer","pickupWeaponTimer","nextMovePeriod","nextSkillPeriod","pickupWeaponPeriod","isInvincible","weaponOnHand","usingSpecialSkill","weaponWaiting","currentTween","position","middleBottom","weapon","fallenRock","attackPosOffset","getWeapon","playSkillAnimation","currentClip","playIdleAnimation","playSprintAnimation","playDeadAnimation","moveDecision","leftTop","Math","floor","random","leftBottom","middleTop","rightTop","rightBottom","startMove","nextPos","distanceX","x","scaleX","easing","useSkill","skillDecision","isDelay","jaggedAttack","sprintModeOne","sprintModeTwo","throwWeapon","delayTime","jaggedIndex","offsetIndex","preAttack","bossWorldPos","parent","convertToWorldSpaceAR","getPosition","convertToNodeSpaceAR","newParticleSystem","instantiate","addChild","randX","width","randY","distanceY","angle","atan","PI","moveTime","sqrt","parallel","spawnFallenRock","schedule","endSpecialSkill","ParticleSystem","startColor","color","v3","length","newRock1","newRock2","push","posX","posY","spawnWeapon","newWeapon","direction","startAttack","pickupWeapon","rollbacking","HPCheck","beingInvincible","causeDamage","HP","unscheduleAllCallbacks","emit","progress","postInvincible","update","dt","isValid","hitWall","ProgressBar","Prefab","attackPath","BossManager_1","BossWeapon","attacking","wayPoints","anglePoints","attackType","attackTypeThreeApply","playerDirection","speedPara","xSpeed","ySpeed","xAcc","yAcc","typeOne","typeTwo","typeThree","stopMove","returnToOriginPos","index","changeSpeed","temp_1","BoxMechanism","initPosition","Vec3","rigidBody","path","distances","rollingBack","RigidBody","v2","Tween","pow","type","RigidBodyType","Dynamic","linearVelocity","BoxRigibodyControl","onCollisionEnter","angularVelocity","gravityScale","onCollisionExit","BridgeMechanism","bridgeAnimation","break","build","id","setVolume","Bullet_1","BulletDamage","bullect","Bullet","bulletXSpeed","bulletYSpeed","shootPosX","shootPosY","speedUpApply","slowDownApply","damagePart","setBulletParameter","radian","cos","sin","speedUpParameter","slowDownParameter","ElevatorManager_1","GateMechanism_1","Button","target","sound","i","elevatorTriggered","buttonFirstTriggered","buttonTrigger","CameraMode","SceneManager_1","CameraController","camera","gameStage","middleGround","sceneManager","_isUpdate","cameraMovementResolve","movementTween","Object","defineProperty","set","flag","getComponentInChildren","systemEvent","SystemEvent","EventType","KEY_DOWN","event","keyCode","macro","KEY","z","updateNormalCameraPosition","sceneThreeCameraMovement","easeCircleActionInOut","Promise","resolve","sent","sceneFourCameraMovement","finalSceneSetUp","zoomRatio","setContentSize","Size","normalSceneSetUp","getComponentsInChildren","filter","initialCameraPosition","getChildByName","cameraLeftEnd","cameraRightEnd","sceneLeftEnd","getCurrentFloorEdgeOffset","sceneRightEnd","cameraTopEnd","cameraDownEnd","sceneTopEnd","sceneDownEnd","Camera","CannonContact","CannonAnimation","isHit","CannonContact_1","CannonMechanism","CannonBody","CannonMap","CannonRock","rockStatus","rockSprite","sandParticle","RockBody","Boolean","climbingMonster","bullet","monsterAnimation","monsterDeathAnimation","shootEffect","jumpFroce","jump","death","jumpLocker","playJumpAnimation","lv","playClimingAnimation","tag","playShootAnimation","REPEAT_FOREVER","playDeathAnimation","Kinematic","shootBullet","anim","monsterWorldPos","unschedule","ClockButtonMechanism","nonActivedSpriteFrame","buttonEffect","isActived","spriteFrame","SpriteFrame","VineMechanism_1","ClockButtonMechanism_1","StretchPlatformMechanism_1","AcceEnergeRock_1","ClockMechanism","hourHand","minuteHand","stair","timeTxt","vine","clockButtons","floors","directionStone","energeRocks","transferPoint","door","doorUnopened","doorOpened","doorEffect","bellEffect","secondPerCircle","isClockWise","hourHandTween","minuteHandTween","speedOptions","currentSpeedIdx","currentHour","currentMinute","isBellPlayed","clockStop","clockStart","forEach","button","skill","onMultiFuncionDirectionStoneClick","stretch","shrink","_finalAction","_speed","changeDirection","by","repeatForever","string","union","_speedMethod","checkStatus","SkillSet","Label","ClockMechanism_1","ClockPlatform","clock","hourPlatform","minutePlatform","hourHandRadius","minuteHandRadius","angleToPosition","angleToRadians","CrossFloor","skillType","WeaponBody_1","DirectionRock","shootRay","rayP2","tempPoint","rayP1","round","rayResults","director","getPhysicsManager","rayCast","RayCastType","AllClosest","collider","skillCaseFromDR","DirectionStone","ElevatorManager","downAnimationState","upAnimationState","stayAnimationState","currentSpeedRatio","elevatorControl","getAnimationState","onChangeSpeed","originSpeedRatio","ExitRockMechanism","exit","NewClass","initial_y","isDrop","firstTime","FallenRockMechanism","needRemainDisplaying","isTriggered","isColliderMoving","isResetTriggered","BoxCollider","offset","MenuController_1","MainMenuController_1","TransitionController_1","CameraController_1","NarratorManager_1","GameController","mainMenu","menu","sceneNodes","currentScene","transition","narrator","bgmCave","bgmCastle","bgmBoss","bgmMainMenu","musicVolume","effectVolume","currentSceneIdx","transitionPromise","game","setFrameRate","setMusicVolume","setEffectsVolume","playMusic","transferStage","isWin","resumeFromFail","showGameResult","clockSceneFailTransition","tab","o","scene","idx","isBackToMainMenu","getMusicVolume","getEffectsVolume","stopMusic","openTransitionferStage","isUpdate","closeTransitionStage","enableClockSceneMessage","GateMechanism","gateAnimation","boxColliderUp","boxColliderDown","gateStatus","forerUsedSkill","initialOpened","isOpened","initialized","upClosedOffset","upClosedSize","size","upOpenedOffset","upOpenedSize","downClosedOffset","downClosedSize","downOpenedOffset","downOpenedSize","open","close","JaggedMechanism","jaggedParticleSystem","originalPos","lastAttackPos","attackMoveTime","returnMoveTime","returning","preparing","timeEffectFromDR","isIdle","life","jaggedWorldPos","timeOffset","returnToOriginalPos","endAttack","changeMovement","time","LRmoveMechanism","animationState","_d","LoadingController","progressBar","progressStatus","preloadScene","onProgress","bind","onLoaded","completeCount","totalCount","toFixed","err","message","loadScene","SettingPage_1","MainMenuController","startBtn","settingBtn","settingPage","helpBtn","helpPage","closeHelpPageBtn","exitBtn","TOUCH_END","end","MeleeAttack","MeleeMonster","damageArea","attackEffect","freezeTime","_moveDirection","onTheGround","playerFounded","reachEdge","reachEdgeCheck","onTheGroundCheck","playAttackAnimation","worldPos","moveDirection","playRunAnimation","playWalkAnimation","isLeft","abs","temp","edgeCheckP1","edgeCheckP2","wallCheckTopP1","wallCheckTopP2","wallCheckMediumP1","wallCheckMediumP2","wallCheckBottomP1","wallCheckBottomP2","edgeRayResults","All","wallTopRayResults","wallMediumRayResults","wallBottomRayResults","leftP1","leftP2","rightP1","rightP2","rayResultsLeft","rayResultsRight","generateDamageArea","newArea","MenuController","volumeToggle","backBtn","helpPanel","closeBtn","escape","Toggle","isChecked","opacity","PlotPoint_1","BridgeMechanism_1","UpDownMoveRockMechanism_1","NarratorManaget","text","plotPoints","bridge","mask","background","lightSection","lightSectionPositions","lightSectionSizes","maskPositoins","initY","targetY","firstRangedMonster","hasDisplayedHint","messageContents","point","onPlotPointTrigger","onPlotPointUntrigger","find","onRangedMonsterDead","off","pauseForHint","easeBackOut","onHintPause","isPaused","testNode","SkillCast_1","PlayerManager","playerPosition","skillRange","userPointer","heartGroup","feetRayPoint","triggerSkillParticle","skillSuccess","skillfail","healthPoint","moveAccel","effectsAnimation","input","animationEvent","currentUsingSkill","isClimbing","isAlive","climbPauseCount","get","q","e","r","toggleSkill","KEY_UP","mechanism","finiteState","triggleSkillSuccessParticle","hurt","die","a","d","run","idle","w","s","space","undefined","updateHearts","resetPlayerState","changeScene","getParent","num","slice","leftRayResult","rightRayResult","nextState","PlotPoint","RangedMonster","attackDistance","distance","onDestroy","JaggedBody","_pos","syncPosition","RollbackMechanism","isTracking","priviousPosition","priviousAngle","RollingRockMechanism","initialPosition","SceneManager","mechanisms","rangedMonsters","meleeMonsters","climbMonsters","specialMonsters","rangedMonsterPrefab","meleeMonsterPrefab","climbMonsterPrefab","specialMonsterPrefab","floorWidthEdgeOffset","floorDetected","rangedMonsterPositions","meleeMonsterPositions","climbMonsterPositions","specialMonsterPositions","currentFloor","map","monster","removeFromParent","SilkMechanism","silkAnimation","silkStatus","skilkEffect","climbCollider","skillCollider","SkillCast","originalPointerPosition","currentCollider","secondCollider","getCollisionManager","MOUSE_MOVE","trackPointerPosition","MOUSE_UP","onPointerClick","addCameraOffset","getLocationX","getLocationY","localPos","rangeCheck","skillRangeWorldPosition","Intersection","polygonCircle","world","points","SpecialButton","animState","isPlaying","startAction","StairMechanism","stairAnimation","pCollider","bCollider","PhysicsPolygonCollider","StretchPlatformMechanism","initX","targetX","currentSpeed","energeSpeed","toRight","TerrainGenerator","tiledmap","TiledMap","tiledSize","getTileSize","layer","getLayer","layerSize","getLayerSize","j","tiled","getTiledTileAt","gid","body","addComponent","physicsCollider","Static","ThornMechanism","vineAnimation","thorn","TimeEffect","toDo","FakeRock_1","TouchedMechanism","fakeRock","hasReturn","TransitionController","hint","Color","then","once","UpDownMoveRockMechanism","movingSpeed","platform","changeMovingSpeed","VineMechanism","vineStatus","BossWeaponBody"],"mappings":"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","sourcesContent":["import TimeEffect from '../TimeEffect';\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class EnergyRock extends TimeEffect {\n    @property(cc.Sprite)\n    private energyRock: cc.Sprite = null;\n\n    private isOpen: boolean = false;\n\n    onLoad() {\n        this.status = 'normal';\n    }\n\n    public rollback() {}\n\n    public accelerate() {\n        if (this.isOpen) {\n            this.reset();\n        } else {\n            this.isOpen = true;\n            this.energyRock.enabled = true;\n            this.energyRock.getComponent(cc.CircleCollider).radius = 196;\n        }\n    }\n\n    public slowdown() {}\n\n    public reset() {\n        this.isOpen = false;\n        this.energyRock.enabled = false;\n        this.energyRock.getComponent(cc.CircleCollider).radius = 0;\n    }\n}\n","import PlayerManager, { StateSet } from './PlayerManager';\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class AnimationEvent extends cc.Component {\r\n    @property(PlayerManager)\r\n    private playerManager: PlayerManager = null;\r\n    @property(cc.Animation)\r\n    private playerAnimation: cc.Animation = null;\r\n    @property(cc.Node)\r\n    private effect: cc.Node = null;\r\n    @property(cc.AudioClip)\r\n    private accelAudio: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private slowAudio: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private rollBacklAudio: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private jumpAudio: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private walkAudio: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private hurtAudio: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private deathAudio: cc.AudioClip = null;\r\n\r\n    private walkAudioID: number = -10;\r\n    private jumpEffectID: number = null;\r\n    private effectAnimation: cc.Animation = null;\r\n\r\n    onLoad() {\r\n        this.effectAnimation = this.effect.getComponent(cc.Animation);\r\n        this.walkAudioID = -10;\r\n    }\r\n    public endHurt() {\r\n        this.playerManager.playerState = StateSet.none;\r\n        if (this.playerManager.GetIsClimbing()) {\r\n            console.log('play');\r\n            this.playerManager.resetClimbCount();\r\n            this.playerAnimation.playAdditive('playerClimb');\r\n            //console.log(this.playerAnimation.playAdditive(\"playerClimb\"));\r\n        }\r\n        console.log('endHurt');\r\n    }\r\n\r\n    public endSkill() {\r\n        this.playerManager.playerState = StateSet.none;\r\n        console.log('endSkill');\r\n    }\r\n\r\n    public endJump() {\r\n        this.playerManager.playerState = StateSet.none;\r\n        console.log('endJump');\r\n    }\r\n\r\n    public afterAccelExpend() {\r\n        console.log('accel');\r\n        this.effectAnimation.play('accel');\r\n    }\r\n\r\n    public afterReverseExpend() {\r\n        console.log('rollBack');\r\n        this.effectAnimation.play('rollBack');\r\n    }\r\n\r\n    public afterSlowExpend() {\r\n        console.log('slow');\r\n        this.effectAnimation.play('slow');\r\n    }\r\n    public noneEffect() {\r\n        this.effectAnimation.play();\r\n    }\r\n\r\n    public accelAudioPlay() {\r\n        cc.audioEngine.playEffect(this.accelAudio, false);\r\n    }\r\n\r\n    public slowAudioPlay() {\r\n        cc.audioEngine.playEffect(this.slowAudio, false);\r\n    }\r\n\r\n    public rollBackAudioPlay() {\r\n        cc.audioEngine.playEffect(this.rollBacklAudio, false);\r\n    }\r\n\r\n    public walkAudioPlay() {\r\n        //console.log(\"walkID =  \", this.walkAudioID);\r\n        if (this.playerManager.status) {\r\n            if (this.walkAudioID === -10) {\r\n                this.walkAudioID = cc.audioEngine.play(this.walkAudio, true, 1);\r\n                //console.log(\"walkID =  \", this.walkAudioID);\r\n            } else if (cc.audioEngine.getState(this.walkAudioID) === cc.audioEngine.AudioState.PAUSED) {\r\n                //console.log(\"resume walk audio\");\r\n                cc.audioEngine.resume(this.walkAudioID);\r\n            }\r\n        }\r\n    }\r\n    public walkAudioPause() {\r\n        if (cc.audioEngine.getState(this.walkAudioID) === cc.audioEngine.AudioState.PLAYING) {\r\n            //console.log(\"stop walk audio\");\r\n            cc.audioEngine.pause(this.walkAudioID);\r\n        }\r\n    }\r\n\r\n    public hurtAudioPlay() {\r\n        cc.audioEngine.playEffect(this.hurtAudio, false);\r\n    }\r\n\r\n    public deathAudioPlay() {\r\n        cc.audioEngine.playEffect(this.deathAudio, false);\r\n    }\r\n\r\n    public jumpAudioPlay() {\r\n        if (this.jumpEffectID === null || cc.audioEngine.getState(this.jumpEffectID) !== cc.audioEngine.AudioState.PLAYING) {\r\n            this.jumpEffectID = cc.audioEngine.playEffect(this.jumpAudio, false);\r\n        }\r\n    }\r\n}\r\n","import TimeEffect from '../../TimeEffect';\nimport SpecialButton from '../SpecialButton';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class NormalElevatorMechanism extends TimeEffect {\n    @property(SpecialButton)\n    private downBtn: SpecialButton = null;\n\n    @property(SpecialButton)\n    private upBtn: SpecialButton = null;\n\n    @property(cc.AudioClip)\n    private elevatorEffect: cc.AudioClip = null;\n\n    @property([cc.Node])\n    private chains: cc.Node[] = [];\n\n    @property(cc.Vec2)\n    private highPosition: cc.Vec2 = new cc.Vec2();\n\n    @property(cc.Vec2)\n    private lowPosition: cc.Vec2 = new cc.Vec2();\n\n    @property\n    private chainHighHeight: number = 0;\n\n    @property\n    private chainLowHeight: number = 0;\n\n    @property\n    private movingSecond: number = 0;\n\n    @property\n    private remainSecond: number = 0;\n\n    private chainOneTween: cc.Tween = null;\n    private chainTwoTween: cc.Tween = null;\n    private elevatorTween: cc.Tween = null;\n\n    private isMoving: boolean = false;\n    private isInHighPosition: boolean = true;\n    private effectID: number = null;\n\n    onLoad() {\n        this.chains[0].zIndex = -1;\n        this.chains[1].zIndex = -1;\n        this.downBtn.node.on('triggered', () => {\n            if (this.isInHighPosition) {\n                this.elevatorDownward();\n            } else {\n                this.elevatorUpward();\n            }\n        });\n        this.upBtn.node.on('triggered', () => {\n            if (this.isInHighPosition) {\n                this.elevatorDownward();\n            } else {\n                this.elevatorUpward();\n            }\n        });\n    }\n\n    private elevatorUpward() {\n        if (this.isMoving && !this.isInHighPosition) {\n            return;\n        }\n        this.isMoving = true;\n        this.elevatorTween = cc\n            .tween(this.node)\n            .delay(this.remainSecond)\n            .call(() => {\n                this.effectID = cc.audioEngine.playEffect(this.elevatorEffect, true);\n            })\n            .to(this.movingSecond, { y: this.highPosition.y })\n            .call(() => {\n                this.isMoving = false;\n                this.isInHighPosition = true;\n                cc.audioEngine.stopEffect(this.effectID);\n            })\n            .start();\n        this.chainOneTween = cc.tween(this.chains[0]).delay(this.remainSecond).to(this.movingSecond, { height: this.chainHighHeight }).start();\n        this.chainTwoTween = cc.tween(this.chains[1]).delay(this.remainSecond).to(this.movingSecond, { height: this.chainHighHeight }).start();\n    }\n\n    private elevatorDownward() {\n        if (this.isMoving && this.isInHighPosition) {\n            return;\n        }\n        this.isMoving = true;\n        this.elevatorTween = cc\n            .tween(this.node)\n            .delay(this.remainSecond)\n            .call(() => {\n                this.effectID = cc.audioEngine.playEffect(this.elevatorEffect, true);\n            })\n            .to(this.movingSecond, { y: this.lowPosition.y })\n            .call(() => {\n                this.isMoving = false;\n                this.isInHighPosition = false;\n                cc.audioEngine.stopEffect(this.effectID);\n            })\n            .start();\n        this.chainOneTween = cc.tween(this.chains[0]).delay(this.remainSecond).to(this.movingSecond, { height: this.chainLowHeight }).start();\n        this.chainTwoTween = cc.tween(this.chains[1]).delay(this.remainSecond).to(this.movingSecond, { height: this.chainLowHeight }).start();\n    }\n\n    // 為了能讓 sceneManager call reset 所以要繼承 TimeEffect\n    public accelerate() {}\n    public slowdown() {}\n    public rollback() {}\n\n    public reset() {\n        this.chainOneTween?.stop();\n        this.chainTwoTween?.stop();\n        this.elevatorTween?.stop();\n        this.node.setPosition(this.highPosition);\n        this.chains[0].height = this.chainHighHeight;\n        this.chains[1].height = this.chainHighHeight;\n        this.isMoving = false;\n        cc.audioEngine.stopEffect(this.effectID);\n    }\n}\n","import TimeEffect from '../../../TimeEffect';\n\nconst { ccclass, property } = cc._decorator;\nconst Input = {};\n@ccclass\nexport default class BlockRockMechanism extends TimeEffect {\n    @property(cc.Sprite)\n    private rock: cc.Sprite = null;\n\n    @property\n    private shrinkDuration: number = 0;\n\n    public rollback() {\n        cc.tween(this.rock.node)\n            .to(this.shrinkDuration, { scale: 1 })\n            .call(() => (this.status = 'original'))\n            .start();\n    }\n\n    public accelerate() {\n        cc.tween(this.rock.node)\n            .to(this.shrinkDuration, { scale: 0 })\n            .call(() => (this.status = 'triggered'))\n            .start();\n    }\n\n    public slowdown() {}\n\n    public reset() {\n        this.status = 'original';\n        this.rock.node.scale = 1;\n    }\n}\n","import TimeEffect from '../TimeEffect';\nimport bossManager from './BossManager'\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BossFallenRock extends TimeEffect {\n    @property\n    private dropSpeed: number = 0;\n\n    @property\n    private intial_y: number = 0;\n\n    @property\n    private target_y: number = 0;\n\n    @property\n    private speed: number = 1;\n\n    public boss: cc.Node = null;\n\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\n        if(other.node.name === 'BossWeapon') {\n            this.node.destroy();\n        }\n    }\n\n    onLoad() {\n        this.status = 'original';\n    }\n\n    public rollback() {\n            this.status = 'original';\n            this.scheduleOnce(()=>{this.node.children[0].group = 'Damage';\n                                   this.node.children[0].getComponent(cc.PhysicsBoxCollider).apply();}, 0.5);\n            cc.tween(this.node)\n            .to(this.dropSpeed*this.speed, { y: this.intial_y })\n            .start();\n        \n    }\n\n    public accelerate() {\n        this.status = 'triggered';\n        cc.tween(this.node)\n        .to(this.dropSpeed, { y: this.target_y })\n        .call(() => {\n            this.node.children[0].getComponent(cc.PhysicsBoxCollider).sensor = false;\n            this.node.children[0].group = 'default';\n            this.node.children[0].getComponent(cc.PhysicsBoxCollider).apply();\n        })\n        .start();\n    }\n\n    public slowdown() {}\n\n    public reset() {\n        this.node.destroy();\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport JaggedMechanism from '../Scene/JaggedMechanism';\nimport BossFallenRock from './BossFallenRock';\nimport TimeEffect from '../TimeEffect';\nimport BossWeapon from './BossWeapon';\nimport PlayerManager from '../Player/PlayerManager';\n\nconst { ccclass, property } = cc._decorator;\n\nexport enum currentPosition {\n    none = -1,\n    leftTop = 0,\n    leftBottom = 1,\n    middleTop = 2,\n    middleBottom = 3,\n    rightTop = 4,\n    rightBottom = 5,\n}\n\n@ccclass\nexport default class Boss extends TimeEffect {\n    @property(cc.Node)\n    private player: cc.Node = null;\n\n    @property(cc.ProgressBar)\n    private HPDisplay: cc.ProgressBar = null;\n\n    @property([cc.Node])\n    private Jagged: cc.Node[] = [];\n\n    @property([cc.Vec2])\n    private bossPosition: cc.Vec3[] = new Array(6);\n\n    @property(cc.Prefab)\n    private fallenRockPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    private bossWeapon: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    private axeParticleSystem: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    private bossSprintParticleSystem: cc.Prefab = null;\n\n    @property(cc.Animation)\n    private bossAnimation: cc.Animation = null;\n\n    @property(cc.AudioClip)\n    private axeEffect: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private jaggedEffect: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private sprintEffectOne: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private sprintEffectTwo: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private deathEffect: cc.AudioClip = null;\n\n    @property\n    private active: boolean = false;\n\n    @property\n    private minMovePeriod: number = 0;\n\n    @property\n    private maxMovePeriod: number = 0;\n\n    @property\n    private minSkillPeriod: number = 0;\n\n    @property\n    private maxSkillPeriod: number = 0;\n\n    @property\n    private moveSpeed: number = 0;\n\n    @property\n    private bossHP: number = 0;\n\n    @property\n    private invincibleTime: number = 0;\n\n    private currentHP: number = 0;\n    private moveTimer: number = 0;\n    private skillTimer: number = 0;\n    private pickupWeaponTimer: number = 0;\n    private nextMovePeriod: number = 0;\n    private nextSkillPeriod: number = 0;\n    private pickupWeaponPeriod: number = 0;\n    private isInvincible: boolean = false;\n    private weaponOnHand: boolean = true;\n    private usingSpecialSkill: boolean = false;\n    private weaponWaiting: boolean = false;\n    private currentTween: cc.Tween = null;\n    private position: currentPosition = currentPosition.middleBottom;\n    private weapon: cc.Node = null;\n    private fallenRock: cc.Node[] = new Array();\n    private attackPosOffset: number[] = [20, 0, -20];\n\n    public getWeapon() {\n        this.weaponOnHand = true;\n    }\n\n    onLoad() {\n        this.reset();\n    }\n\n    private playSkillAnimation() {\n        if (this.bossAnimation.currentClip.name !== 'BossSkill') {\n            this.bossAnimation.play('BossSkill');\n        }\n    }\n\n    private playIdleAnimation() {\n        if (this.bossAnimation.currentClip.name !== 'BossIdle') {\n            this.bossAnimation.play();\n        }\n    }\n\n    private playSprintAnimation() {\n        if (this.bossAnimation.currentClip.name !== 'BossSprint') {\n            this.bossAnimation.play('BossSprint');\n        }\n    }\n\n    private playDeadAnimation() {\n        if (this.bossAnimation.currentClip.name !== 'BossDead') {\n            this.bossAnimation.play('BossDead');\n        }\n    }\n\n    private moveDecision() {\n        switch (this.position) {\n            case currentPosition.leftTop:\n                do {\n                    this.position = Math.floor(Math.random() * 6);\n                } while (this.position === currentPosition.leftTop);\n                break;\n\n            case currentPosition.leftBottom:\n                do {\n                    this.position = Math.floor(Math.random() * 6);\n                } while (this.position === currentPosition.leftBottom);\n                break;\n\n            case currentPosition.middleTop:\n                do {\n                    this.position = Math.floor(Math.random() * 6);\n                } while (this.position === currentPosition.middleTop);\n                break;\n\n            case currentPosition.middleBottom:\n                do {\n                    this.position = Math.floor(Math.random() * 6);\n                } while (this.position === currentPosition.middleBottom);\n                break;\n\n            case currentPosition.rightTop:\n                do {\n                    this.position = Math.floor(Math.random() * 6);\n                } while (this.position === currentPosition.rightTop);\n                break;\n\n            case currentPosition.rightBottom:\n                do {\n                    this.position = Math.floor(Math.random() * 6);\n                } while (this.position === currentPosition.rightBottom);\n                break;\n        }\n        this.startMove(this.bossPosition[this.position]);\n    }\n\n    private startMove(nextPos: cc.Vec3) {\n        if (this.currentTween !== null) {\n            this.currentTween.stop();\n        }\n\n        const distanceX = this.player.x - nextPos.x;\n        this.node.scaleX = distanceX < 0 ? 1 : -1;\n\n        this.currentTween = cc\n            .tween(this.node)\n            .to(100 / this.moveSpeed, { position: nextPos }, { easing: 'quartOut' })\n            .call(() => {\n                this.isInvincible = false;\n            })\n            .start();\n    }\n\n    private useSkill() {\n        const skillDecision = this.weaponOnHand ? Math.floor(Math.random() * 4) : Math.floor(Math.random() * 3);\n        if (skillDecision === 0) {\n            this.playSkillAnimation();\n            cc.audioEngine.playEffect(this.jaggedEffect, false);\n            const isDelay: boolean = Math.floor(Math.random() * 2) === 0 ? true : false;\n            this.jaggedAttack(isDelay);\n        } else if (skillDecision === 1) {\n            cc.audioEngine.playEffect(this.sprintEffectOne, false);\n            this.sprintModeOne();\n        } else if (skillDecision === 2) {\n            cc.audioEngine.playEffect(this.sprintEffectTwo, false);\n            this.sprintModeTwo();\n        } else {\n            this.playSkillAnimation();\n            cc.audioEngine.playEffect(this.axeEffect, false);\n            this.throwWeapon();\n        }\n    }\n\n    private jaggedAttack(isDelay: boolean = true) {\n        const delayTime = isDelay ? Math.random() * 0.5 + 0.75 : 0;\n\n        let jaggedIndex = Math.floor(Math.random() * 3);\n        let offsetIndex = Math.floor(Math.random() * 3);\n        this.Jagged[jaggedIndex].getComponent(JaggedMechanism).preAttack(this.attackPosOffset[offsetIndex], 0);\n        offsetIndex = Math.floor(Math.random() * 3);\n        jaggedIndex = (jaggedIndex + 1) % 3;\n        this.Jagged[jaggedIndex].getComponent(JaggedMechanism).preAttack(this.attackPosOffset[offsetIndex], delayTime);\n\n        this.scheduleOnce(this.playIdleAnimation, 1);\n    }\n\n    private sprintModeOne() {\n        if (this.currentTween !== null) {\n            this.currentTween.stop();\n        }\n\n        this.usingSpecialSkill = true;\n        this.node.group = 'MonsterDamage';\n        this.node.getComponent(cc.PhysicsBoxCollider).apply();\n        const bossWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        this.node.scaleX = this.player.x - this.player.parent.convertToNodeSpaceAR(bossWorldPos).x < 0 ? 1 : -1;\n\n        let newParticleSystem = cc.instantiate(this.bossSprintParticleSystem);\n        this.node.addChild(newParticleSystem);\n\n        const randX = Math.random() * this.node.parent.width - this.node.parent.width / 2;\n        const randY = (Math.random() * this.node.parent.height) / 4 + this.node.parent.height / 4;\n\n        const distanceX = this.player.x - randX;\n        const distanceY = this.player.y - randY;\n        const radian = Math.atan(distanceY / distanceX);\n        let angle = (radian * 180) / Math.PI;\n\n        const moveTime = Math.sqrt(distanceX * distanceX + distanceY * distanceY) / (this.moveSpeed * 7.5);\n\n        this.currentTween = cc\n            .tween(this.node)\n            .parallel(cc.tween().to(1, { x: randX }), cc.tween().to(1, { y: randY }))\n            .call(() => {\n                this.node.scaleX = distanceX < 0 ? 1 : -1;\n                this.node.angle = angle;\n                this.playSprintAnimation();\n            })\n            .parallel(cc.tween().to(moveTime, { x: this.player.x }, { easing: 'sineIn' }), cc.tween().to(moveTime, { y: this.player.y }, { easing: 'sineIn' }))\n            .call(() => {\n                this.spawnFallenRock();\n                this.schedule(this.endSpecialSkill, 0.2, 0);\n            })\n            .start();\n    }\n\n    private sprintModeTwo() {\n        if (this.currentTween !== null) {\n            this.currentTween.stop();\n        }\n\n        this.usingSpecialSkill = true;\n        this.node.group = 'MonsterDamage';\n        this.node.getComponent(cc.PhysicsBoxCollider).apply();\n\n        let newParticleSystem = cc.instantiate(this.bossSprintParticleSystem);\n        newParticleSystem.getComponent(cc.ParticleSystem).startColor = cc.color(51, 240, 255);\n        this.node.addChild(newParticleSystem);\n\n        const bossWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        const distanceX = -350 - this.player.parent.convertToNodeSpaceAR(bossWorldPos).x;\n        const distanceY = 150 - this.player.parent.convertToNodeSpaceAR(bossWorldPos).y;\n\n        const moveTime = Math.sqrt(distanceX * distanceX + distanceY * distanceY) / (this.moveSpeed * 10);\n\n        this.currentTween = cc\n            .tween(this.node)\n            .call(() => {\n                this.playSkillAnimation();\n            })\n            .delay(1)\n            .call(() => {\n                this.playIdleAnimation();\n            })\n            .to(moveTime, { position: cc.v3(-350, 150, 0) }, { easing: 'sineOut' })\n            .delay(0.2)\n            .to(0.2, { position: cc.v3(-350, -200, 0) })\n            .delay(0.2)\n            .to(0.2, { position: cc.v3(0, 150, 0) }, { easing: 'sineOut' })\n            .delay(0.2)\n            .to(0.2, { position: cc.v3(0, -200, 0) })\n            .delay(0.2)\n            .to(0.2, { position: cc.v3(350, 150, 0) }, { easing: 'sineOut' })\n            .delay(0.2)\n            .to(0.2, { position: cc.v3(350, -200, 0) })\n            .call(() => {\n                this.spawnFallenRock();\n                this.schedule(this.endSpecialSkill, 0.2, 0);\n            })\n            .start();\n    }\n\n    private endSpecialSkill() {\n        this.node.group = 'Monster';\n        this.node.getComponent(cc.PhysicsBoxCollider).apply();\n        this.usingSpecialSkill = false;\n        this.isInvincible = true;\n        this.node.angle = 0;\n        this.playIdleAnimation();\n        this.moveDecision();\n    }\n\n    private spawnFallenRock() {\n        if (this.fallenRock.length !== 0) {\n            this.fallenRock[0].getComponent(BossFallenRock).reset();\n            this.fallenRock[1].getComponent(BossFallenRock).reset();\n            this.fallenRock.length = 0;\n        }\n        let newRock1 = cc.instantiate(this.fallenRockPrefab);\n        let newRock2 = cc.instantiate(this.fallenRockPrefab);\n        newRock1.setPosition(Math.random() * 640 - 640, 480);\n        newRock2.setPosition(Math.random() * 640, 480);\n        this.node.parent.addChild(newRock1);\n        this.node.parent.addChild(newRock2);\n        newRock1.getComponent(BossFallenRock).boss = this.node;\n        newRock2.getComponent(BossFallenRock).boss = this.node;\n        newRock1.getComponent(BossFallenRock).accelerate();\n        newRock2.getComponent(BossFallenRock).accelerate();\n\n        this.fallenRock.push(newRock1);\n        this.fallenRock.push(newRock2);\n    }\n\n    private throwWeapon() {\n        if (this.currentTween !== null) {\n            this.currentTween.stop();\n        }\n\n        this.usingSpecialSkill = true;\n        this.weaponOnHand = false;\n\n        this.pickupWeaponTimer = 0;\n        this.pickupWeaponPeriod = Math.random() * 10 + 5;\n\n        const posX = Math.random() * 200 - 100;\n        const posY = Math.random() * 100;\n        const bossWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        const distanceX = posX - this.player.parent.convertToNodeSpaceAR(bossWorldPos).x;\n        const distanceY = posY - this.player.parent.convertToNodeSpaceAR(bossWorldPos).y;\n\n        const moveTime = Math.sqrt(distanceX * distanceX + distanceY * distanceY) / (this.moveSpeed * 5);\n\n        this.currentTween = cc\n            .tween(this.node)\n            .parallel(cc.tween().to(moveTime, { x: posX }, { easing: 'quartOut' }), cc.tween().to(moveTime, { y: posY }, { easing: 'quartOut' }))\n            .call(() => {\n                let newParticleSystem = cc.instantiate(this.axeParticleSystem);\n                newParticleSystem.setPosition(90, 5);\n                this.node.addChild(newParticleSystem);\n                this.schedule(this.spawnWeapon, 1, 0);\n            })\n            .start();\n    }\n\n    private spawnWeapon() {\n        let newWeapon = cc.instantiate(this.bossWeapon);\n        newWeapon.setPosition(this.node.x + 70 * this.node.scaleX, this.node.y + 30);\n        this.node.parent.addChild(newWeapon);\n        this.weapon = newWeapon;\n        const bossWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        const distanceX = this.player.x - this.player.parent.convertToNodeSpaceAR(bossWorldPos).x;\n        const direction = distanceX > 0 ? false : true;\n        newWeapon.getComponent(BossWeapon).Boss = this.node;\n        newWeapon.getComponent(BossWeapon).startAttack(direction);\n        this.weaponWaiting = true;\n    }\n\n    private pickupWeapon() {\n        if (this.weapon === null || this.weapon.getComponent(BossWeapon).rollbacking) {\n            return;\n        }\n        this.usingSpecialSkill = true;\n        this.node.group = 'MonsterDamage';\n        this.node.getComponent(cc.PhysicsBoxCollider).apply();\n\n        let newParticleSystem = cc.instantiate(this.bossSprintParticleSystem);\n        newParticleSystem.getComponent(cc.ParticleSystem).startColor = cc.color(251, 240, 255);\n        this.node.addChild(newParticleSystem);\n\n        const bossWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        const distanceX = this.weapon.x - this.player.parent.convertToNodeSpaceAR(bossWorldPos).x;\n        const distanceY = this.weapon.y - this.player.parent.convertToNodeSpaceAR(bossWorldPos).y;\n\n        const moveTime = Math.sqrt(distanceX * distanceX + distanceY * distanceY) / (this.moveSpeed * 15);\n\n        this.currentTween = cc\n            .tween(this.node)\n            .delay(1)\n            .parallel(cc.tween().to(moveTime, { x: this.weapon.x }), cc.tween().to(moveTime, { y: this.weapon.y }))\n            .call(() => {\n                this.weapon.destroy();\n                this.getWeapon();\n                this.scheduleOnce(this.endSpecialSkill, 0.2);\n            })\n            .start();\n    }\n\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\n        if (!this.isInvincible) {\n            if (other.node.group === 'Damage') {\n                this.currentHP -= 10;\n                this.HPCheck(this.currentHP);\n                this.node.children[0].color = cc.color(255, 0, 0);\n                this.beingInvincible();\n            }\n            if (this.weapon !== null) {\n                if (other.node.name === 'BossWeapon' && this.weapon.getComponent(BossWeapon).causeDamage) {\n                    this.currentHP -= 10;\n                    this.HPCheck(this.currentHP);\n                    this.node.children[0].color = cc.color(255, 0, 0);\n                    this.beingInvincible();\n                }\n            }\n        }\n    }\n\n    private HPCheck(HP: number) {\n        if (HP <= 0) {\n            cc.audioEngine.playEffect(this.deathEffect, false);\n            this.playDeadAnimation();\n            this.unscheduleAllCallbacks();\n            this.scheduleOnce(() => (this.node.active = false), 1);\n            this.scheduleOnce(() => this.node.emit('dead'), 1);\n        }\n        this.HPDisplay.progress = HP / this.bossHP;\n    }\n\n    private beingInvincible() {\n        this.isInvincible = true;\n        this.scheduleOnce(this.postInvincible, this.invincibleTime);\n    }\n\n    private postInvincible() {\n        this.scheduleOnce(() => {\n            this.isInvincible = false;\n        }, 0.5);\n        this.node.children[0].color = cc.color(255, 255, 255);\n        if (!this.usingSpecialSkill) {\n            this.moveTimer = 0;\n            this.nextMovePeriod = Math.random() * this.minMovePeriod + (this.maxMovePeriod - this.minMovePeriod);\n            this.moveDecision();\n        }\n    }\n\n    public accelerate() {}\n    public slowdown() {}\n    public rollback() {}\n\n    public reset() {\n        this.node.active = true;\n        this.unscheduleAllCallbacks();\n        if (this.weapon !== null) {\n            this.weapon.destroy();\n        }\n        if (this.currentTween !== null) {\n            this.currentTween.stop();\n        }\n        if (this.fallenRock.length !== 0) {\n            this.fallenRock[0].getComponent(BossFallenRock).reset();\n            this.fallenRock[1].getComponent(BossFallenRock).reset();\n            this.fallenRock.length = 0;\n        }\n\n        this.isInvincible = false;\n        this.weaponOnHand = true;\n        this.usingSpecialSkill = false;\n        this.weaponWaiting = false;\n\n        this.currentHP = this.bossHP;\n\n        this.moveTimer = 0;\n        this.skillTimer = 0;\n        this.pickupWeaponTimer = 0;\n        this.nextMovePeriod = Math.random() * (this.maxMovePeriod - this.minMovePeriod) + this.minMovePeriod;\n        this.nextSkillPeriod = Math.random() * (this.maxSkillPeriod - this.minSkillPeriod) + this.minMovePeriod;\n        this.pickupWeaponPeriod = 1;\n        this.bossAnimation.play();\n        this.HPDisplay.progress = 1;\n        this.position = currentPosition.middleBottom;\n        this.node.setPosition(this.bossPosition[this.position]);\n        this.node.scaleX = 1;\n        this.node.angle = 0;\n    }\n\n    update(dt) {\n        if (this.weaponWaiting) {\n            if (this.weaponOnHand) {\n                this.weaponWaiting = false;\n                this.moveTimer = 0;\n                this.endSpecialSkill();\n            }\n            if (!this.weapon.isValid || this.weapon.getComponent(BossWeapon).hitWall) {\n                this.weaponWaiting = false;\n                this.moveTimer = 0;\n                this.endSpecialSkill();\n            }\n        }\n\n        if (this.usingSpecialSkill || !this.player.getComponent(PlayerManager).status || this.currentHP <= 0) {\n            this.moveTimer = 0;\n            this.skillTimer = 0;\n        }\n        if (this.active && !this.usingSpecialSkill) {\n            this.moveTimer += dt;\n            this.skillTimer += dt;\n            if (!this.weaponOnHand) {\n                this.pickupWeaponTimer += dt;\n            }\n        }\n        if (this.moveTimer >= this.nextMovePeriod) {\n            this.moveTimer = 0;\n            this.nextMovePeriod = Math.random() * (this.maxMovePeriod - this.minMovePeriod) + this.minMovePeriod;\n            this.nextSkillPeriod += 1;\n            this.pickupWeaponPeriod += 1;\n            if (this.player.x !== -450 && !this.weaponWaiting) {\n                this.moveDecision();\n            }\n        }\n        if (this.skillTimer >= this.nextSkillPeriod) {\n            this.skillTimer = 0;\n            this.nextSkillPeriod = Math.random() * (this.maxSkillPeriod - this.minSkillPeriod) + this.minMovePeriod;\n            this.nextMovePeriod += 1;\n            this.pickupWeaponPeriod += 1;\n            if (this.player.x !== -450 && !this.weaponWaiting) {\n                this.useSkill();\n            }\n        }\n        if (this.pickupWeaponTimer >= this.pickupWeaponPeriod) {\n            this.pickupWeaponTimer = 0;\n            this.pickupWeaponPeriod = 100;\n            this.nextMovePeriod += 1;\n            this.nextSkillPeriod += 1;\n            this.pickupWeapon();\n        }\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport TimeEffect from '../TimeEffect'\nimport BossManager from './BossManager'\n\nconst {ccclass, property} = cc._decorator;\n\nexport enum attackPath {\n    none = -1,\n    typeOne = 1,\n    typeTwo = 2,\n    typeThree = 3,\n}\n\n@ccclass\nexport default class BossWeapon extends TimeEffect {\n\n    @property(cc.Prefab) \n    private axeParticleSystem: cc.Prefab = null;\n\n    private attacking: boolean = false;\n    private wayPoints: cc.Vec2[] = new Array();\n    private anglePoints: number[] = new Array();\n    private attackType: attackPath = attackPath.none;\n    private attackTypeThreeApply: boolean = false;\n    private playerDirection: number = 1; // 1左邊, -1右邊\n    private speedPara: number = 1;\n    private xSpeed: number = 0;\n    private ySpeed: number = 0;\n    private xAcc: number = 0;\n    private yAcc: number = 0;\n    public Boss: cc.Node = null;\n    public hitWall: boolean = false;\n    public causeDamage: boolean = false;\n    public rollbacking: boolean = false;\n\n    onLoad() {\n        this.status = 'normal';\n    }\n\n    public startAttack(direction: boolean) {\n\n        this.playerDirection = direction ? 1 : -1;\n\n        this.attacking = true;\n\n        this.attackType = Math.floor(Math.random() * 3) + 1;       \n        switch(this.attackType) {\n            case attackPath.typeOne:\n                this.xSpeed = 1200 * this.playerDirection;\n                this.ySpeed = 750;\n                this.xAcc = -1600 * this.playerDirection;\n                this.yAcc = -2000;\n                break;\n            \n            case attackPath.typeTwo:\n                this.xSpeed = 1000 * this.playerDirection;\n                this.ySpeed = 0;\n                this.xAcc = -2000 * this.playerDirection;\n                this.yAcc = -300;\n                break;\n\n            case attackPath.typeThree:\n                this.attackTypeThreeApply = true;\n                this.xSpeed = 1200 * this.playerDirection;\n                this.ySpeed = -750;\n                this.xAcc = -2000 * this.playerDirection;\n                this.yAcc = 1000;\n                break;\n        }\n        \n    }\n\n    private stopMove() {\n        this.node.group = 'default';\n        this.node.getComponent(cc.PhysicsBoxCollider).apply();\n        this.hitWall = true;\n    }\n    \n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\n        if(other.node.group === 'default' && other.node.name !== 'Player') {\n            this.stopMove();\n        }\n    }\n\n    //用遞迴來完成倒帶路徑, index是wayPoint的陣列位置\n    private returnToOriginPos(index: number) {\n\n        //index < 0代表已回到原本的開始記錄位置,可做後續處理\n        if(index < 0) {\n            if(this.hitWall) {\n                let newParticleSystem = cc.instantiate(this.axeParticleSystem);\n                newParticleSystem.setPosition(this.node.x + 70, this.node.y);\n                this.node.parent.addChild(newParticleSystem);\n            }\n            this.Boss.getComponent(BossManager).getWeapon();\n            this.node.destroy();\n            return;\n        }\n\n        //按照紀錄的位置移動,每次完成移動後就把index - 1然後重新呼叫本function\n        cc.tween(this.node)\n        .parallel(cc.tween().to(0.03, {x: this.wayPoints[index].x}),\n                  cc.tween().to(0.03, {y: this.wayPoints[index].y}),\n                  cc.tween().to(0.03, {angle: this.anglePoints[index]}))\n        .call(() => {this.returnToOriginPos(index - 1)})\n        .start();\n        \n    }\n\n\n    public accelerate() {\n        if(!this.hitWall) {\n            this.changeSpeed(false);\n        }\n    }\n    public slowdown() {\n        if(!this.hitWall) {\n            this.changeSpeed(true);\n        }\n    }\n\n    private changeSpeed(slowdown: boolean, reset: boolean = false) {\n        switch (this.status) {\n            case 'normal':\n                this.speedPara = slowdown ? 0.2 : 3;\n                this.status = slowdown ? 'slowdown' : 'speedup';\n                break;\n            case 'speedup':\n                this.speedPara = slowdown ? 1 : 3;\n                this.status = slowdown ? 'normal' : 'speedup';\n                break;\n            case 'slowdown':\n                this.speedPara = slowdown ? 0.2 : 1;\n                this.status = slowdown ? 'slowdown' : 'normal';\n                break;\n            default:\n                break;\n        }\n        if (reset) {\n            this.speedPara = 1;\n            this.status = 'normal';\n        }\n    }\n\n    public rollback() {\n        if(this.hitWall) {\n            this.causeDamage = true;\n        }\n        this.attacking = false;\n        this.rollbacking = true;\n        this.returnToOriginPos(this.wayPoints.length - 1);\n    }\n\n    public reset() {\n        this.node.destroy();\n    }\n\n    update(dt: number) {\n        if(this.attacking) {\n            if(this.attackType === attackPath.typeOne) {\n                if(this.yAcc < 0) {\n                    this.yAcc += (55 * this.speedPara);\n                }\n                else {\n                    this.yAcc = 0;\n                }\n            }\n            if(this.attackType === attackPath.typeThree) {\n                if(this.ySpeed > 0 && this.attackTypeThreeApply) {\n                    this.attackTypeThreeApply = false;\n                    const temp = this.yAcc;\n                    this.yAcc /= (20 * this.speedPara);\n                    this.schedule(() => {this.yAcc = temp}, 0.35, 0)\n                }\n            }\n            this.wayPoints.push(this.node.getPosition());\n            this.anglePoints.push(this.node.angle);\n            this.node.x += this.xSpeed * dt * this.speedPara;\n            this.node.y += this.ySpeed * dt * this.speedPara;\n            this.node.angle += -720 * dt * this.speedPara;\n            if(this.node.x < -this.node.parent.width / 2) {\n                this.attacking = false;\n                this.stopMove();\n                this.node.x = -this.node.parent.width / 2;\n            } else if(this.node.x > this.node.parent.width / 2) {\n                this.attacking = false;\n                this.stopMove();\n                this.node.x = this.node.parent.width / 2;\n            }\n            if(this.node.y < -this.node.parent.height / 2) {\n                this.attacking = false;\n                this.stopMove();\n                this.node.y = -this.node.parent.height / 2;\n            } else if(this.node.y > this.node.parent.height / 2) {\n                this.attacking = false;\n                this.stopMove();\n                this.node.y = this.node.parent.height / 2;\n            }\n\n            this.xSpeed += this.xAcc * dt * this.speedPara;\n            this.ySpeed += this.yAcc * dt * this.speedPara;\n        }\n    }\n}\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BoxMechanism extends TimeEffect {\r\n\r\n    private initPosition: cc.Vec3 = new cc.Vec3();\r\n    private rigidBody: cc.RigidBody = null;\r\n    private path: cc.Vec2[] = new Array();\r\n    private angle: number[] = new Array();\r\n    private distances: number = 0;\r\n    private parent: cc.Node = null;\r\n\r\n    private rollingBack: boolean = false;\r\n\r\n    private currentTween: cc.Tween = null;\r\n\r\n    onLoad() {\r\n        this.parent = this.node.parent;\r\n        this.status = 'normal';\r\n        this.rigidBody = this.node.parent.getComponent(cc.RigidBody);\r\n        this.path.push(cc.v2(this.parent.x, this.parent.y));\r\n        this.angle.push(this.parent.angle);\r\n        this.initPosition = this.parent.position;\r\n        this.currentTween = new cc.Tween();\r\n    }\r\n    update() {\r\n        if (!this.rollingBack) {\r\n            this.distances = Math.sqrt(Math.pow(this.parent.x - this.path[this.path.length - 1].x, 2) + Math.pow(this.parent.y - this.path[this.path.length - 1].y, 2));\r\n            //console.log(this.distances);\r\n            if (this.distances >= 10) {\r\n                this.path.push(cc.v2(this.parent.x, this.parent.y));\r\n                this.angle.push(this.parent.angle);\r\n\r\n                //console.log(\"pathL : \", this.path.length, \"ANGL : \", this.angularVel.length);\r\n            }\r\n        }\r\n    }\r\n\r\n    private returnToOriginPos(index: number) {\r\n        //index < 0代表已回到原本的開始記錄位置,可做後續處理\r\n        if (index < 0) {\r\n            this.currentTween.stop();\r\n            this.status = 'normal';\r\n            this.rigidBody.type = cc.RigidBodyType.Dynamic;\r\n            this.parent.position = this.initPosition;\r\n            this.parent.angle = 0;\r\n            this.rigidBody.linearVelocity = cc.v2(0, 0);\r\n            this.path = new Array();\r\n            this.angle = new Array();\r\n            this.path.push(cc.v2(this.parent.x, this.parent.y));\r\n            this.angle.push(this.parent.angle);\r\n            this.rollingBack = false;\r\n            return;\r\n        }\r\n        //按照紀錄的位置移動,每次完成移動後就把index - 1然後重新呼叫本function\r\n        this.currentTween = cc\r\n            .tween(this.parent)\r\n            .parallel(cc.tween().to(0.03, { x: this.path[index].x }), cc.tween().to(0.03, { y: this.path[index].y }), cc.tween().to(0.03, { angle: this.angle[index] }))\r\n            .call(() => {\r\n                this.returnToOriginPos(index - 1);\r\n            })\r\n            .start();\r\n    }\r\n\r\n    public rollback() {\r\n        this.status = 'original';\r\n        this.rollingBack = true;\r\n        this.returnToOriginPos(this.path.length - 1);\r\n    }\r\n\r\n    public accelerate() { }\r\n\r\n    public slowdown() {\r\n\r\n        this.currentTween.stop();\r\n        this.rigidBody.linearVelocity = cc.v2(0, 0);\r\n\r\n    }\r\n\r\n    public reset() {\r\n        this.currentTween.stop();\r\n        this.status = 'normal';\r\n        this.rigidBody.type = cc.RigidBodyType.Dynamic;\r\n        this.parent.position = this.initPosition;\r\n        this.parent.angle = 0;\r\n        this.rigidBody.linearVelocity = cc.v2(0, 0);\r\n        this.path = new Array();\r\n        this.angle = new Array();\r\n        this.path.push(cc.v2(this.parent.x, this.parent.y));\r\n        this.angle.push(this.parent.angle);\r\n        this.rollingBack = false;\r\n    }\r\n}\r\n","\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BoxRigibodyControl extends cc.Component {\r\n\r\n    private rigidBody: cc.RigidBody = null;\r\n    onLoad() {\r\n\r\n        this.rigidBody = this.getComponent(cc.RigidBody);\r\n    }\r\n\r\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n\r\n        if (other.node.name === 'EnergyRockSkillArea') {\r\n            console.log(\"enter slow\");\r\n            this.rigidBody.linearVelocity = cc.v2(this.rigidBody.linearVelocity.x / 3, this.rigidBody.linearVelocity.y / 3);\r\n            this.rigidBody.angularVelocity = this.rigidBody.angularVelocity / 3;\r\n            this.rigidBody.gravityScale = 0.2;\r\n        }\r\n    }\r\n\r\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\r\n        if (other.node.name === 'EnergyRockSkillArea') {\r\n            console.log(\"exit slow\");\r\n            this.rigidBody.linearVelocity = cc.v2(this.rigidBody.linearVelocity.x * 3, this.rigidBody.linearVelocity.y * 3);\r\n            this.rigidBody.angularVelocity = this.rigidBody.angularVelocity * 3;\r\n            this.rigidBody.gravityScale = 2;\r\n        }\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BridgeMechanism extends TimeEffect {\r\n    @property(cc.Animation)\r\n    private bridgeAnimation: cc.Animation = null;\r\n    @property(cc.AudioClip)\r\n    private break: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private build: cc.AudioClip = null;\r\n\r\n    onLoad() {\r\n        this.status = 'triggered';\r\n        this.bridgeAnimation.on('play', () => {\r\n            this.status = 'transforming';\r\n            this.node.emit('status', this.status);\r\n        });\r\n        this.bridgeAnimation.on('finished', () => {\r\n            this.status = this.bridgeAnimation.currentClip.name === 'breakingBridge' ? 'triggered' : 'original';\r\n            this.node.emit('status', this.status);\r\n        });\r\n    }\r\n\r\n    public rollback() {\r\n        cc.audioEngine.playEffect(this.build, false);\r\n        this.bridgeAnimation.play('unBreakingBridge');\r\n    }\r\n\r\n    public accelerate() {\r\n        const id: number = cc.audioEngine.playEffect(this.break, false);\r\n        cc.audioEngine.setVolume(id, 0.3);\r\n        this.bridgeAnimation.play('breakingBridge');\r\n    }\r\n\r\n    public slowdown() {}\r\n\r\n    public reset() {\r\n        this.status = 'triggered';\r\n        this.bridgeAnimation.node.setPosition(724, -200);\r\n    }\r\n}\r\n","import Bullet from './Bullet';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BulletDamage extends cc.Component {\n    @property(Bullet)\n    public bullect: Bullet = null;\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\n            this.node.parent.destroy();\n    }\n}\n","import TimeEffect from '../TimeEffect';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Bullet extends TimeEffect {\n    private bulletXSpeed: number = 0;\n    private bulletYSpeed: number = 0;\n    private shootPosX: number = 0;\n    private shootPosY: number = 0;\n    private speedUpApply: boolean = false;\n    private slowDownApply: boolean = false;\n\n    @property(cc.Node)\n    public damagePart: cc.Node = null;\n\n    onLoad() {\n        this.status = 'normal';\n        this.shootPosX = this.node.x;\n        this.shootPosY = this.node.y;\n    }\n\n    update(dt: number) {\n        this.node.x += this.bulletXSpeed * dt;\n        this.node.y += this.bulletYSpeed * dt;\n        this.damagePart.x += this.bulletXSpeed * dt; // 節點在有RigidBody Component的情況下，Position、angle不會隨著 Parent改變\n        this.damagePart.y += this.bulletYSpeed * dt;\n    }\n\n    //調整子彈射擊的速度(speed)和角度(angle)\n    public setBulletParameter(speed: number, angle: number = this.node.angle) {\n        let radian: number = (angle * Math.PI) / 180;\n        this.node.angle = angle;\n        this.damagePart.angle = angle;\n        this.bulletXSpeed = speed * Math.cos(radian);\n        this.bulletYSpeed = speed * Math.sin(radian);\n    }\n\n    //子彈加速(先寫死成兩倍)\n    public accelerate() {\n        let speedUpParameter: number = 2;\n        if (this.slowDownApply) {\n            speedUpParameter *= 2;\n            this.slowDownApply = false;\n        }\n        this.bulletXSpeed *= speedUpParameter;\n        this.bulletYSpeed *= speedUpParameter;\n        this.speedUpApply = true;\n    }\n\n    //子彈減速(一樣寫死兩倍)\n    public slowdown() {\n        let slowDownParameter = 2;\n        if (this.speedUpApply) {\n            slowDownParameter *= 2;\n            this.speedUpApply = false;\n        }\n        this.bulletXSpeed /= slowDownParameter;\n        this.bulletYSpeed /= slowDownParameter;\n        this.slowDownApply = true;\n    }\n\n    //子彈倒帶並更改tag(碰撞判定)為可攻擊到怪物 在回到射擊點後消失\n    public rollback() {\n        this.bulletXSpeed = -this.bulletXSpeed;\n        this.bulletYSpeed = -this.bulletYSpeed;\n        this.node.angle = this.node.angle - 180;\n        if (this.damagePart.group === 'Damage') {\n            this.damagePart.group = 'MonsterDamage';\n        } else {\n            this.damagePart.group = 'Damage';\n        }\n        this.damagePart.getComponent(cc.PhysicsBoxCollider).apply();\n    }\n\n    public reset() {}\n}\n","import TimeEffect from '../TimeEffect';\r\nimport elevatorManager from './ElevatorManager';\r\nimport gateManager from './Mechanism/FirstScene/GateMechanism';\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Button extends TimeEffect {\r\n    @property([cc.Node])\r\n    private target: cc.Node[] = [];\r\n\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\r\n        if (other.node.name === 'Player') {\r\n            for (let i = 0; i < this.target.length; i++) {\r\n                if (this.target[i].name === 'Elevator') {\r\n                    const id: number = cc.audioEngine.playEffect(this.sound, false);\r\n                    cc.audioEngine.setVolume(id, 1);\r\n                    this.node.getComponent(cc.Animation).play('clickBtn');\r\n                    this.target[i].getComponent(elevatorManager).elevatorTriggered();\r\n                }\r\n                if (this.target[i].name === 'Gate' && !this.target[i].getComponent(gateManager).buttonFirstTriggered) {\r\n                    this.node.getComponent(cc.Animation).play('gateBtn');\r\n                    this.target[i].getComponent(gateManager).buttonTrigger();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public accelerate() {}\r\n\r\n    public slowdown() {}\r\n\r\n    public rollback() {}\r\n\r\n    public reset() {\r\n        this.node.getComponent(cc.Animation).play('clickBtn');\r\n    }\r\n}\r\n","import SceneManager from './Scene/SceneManager';\nimport PlayerManager from './Player/PlayerManager';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CameraController extends cc.Component {\n    @property(cc.Camera)\n    private camera: cc.Camera = null;\n\n    @property(cc.Node)\n    private gameStage: cc.Node = null;\n\n    @property(cc.Node)\n    private middleGround: cc.Node = null;\n\n    @property(PlayerManager)\n    private player: PlayerManager = null;\n\n    private sceneManager: cc.Node = null;\n    private _isUpdate: boolean = true;\n    private cameraMovementResolve: (value: void) => void = null;\n    private movementTween: cc.Tween = null;\n\n    public set isUpdate(flag: boolean) {\n        this._isUpdate = flag;\n    }\n\n    onLoad() {\n        this.sceneManager = this.gameStage.getComponentInChildren(SceneManager).node;\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event: cc.Event.EventKeyboard) => {\n            if (event.keyCode === cc.macro.KEY.z) {\n                this.reset();\n            }\n        });\n    }\n\n    update() {\n        if (!this._isUpdate) {\n            return;\n        }\n        this.updateNormalCameraPosition();\n        this.middleGround?.setPosition(this.camera.node.x + 640, this.camera.node.y + 360);\n    }\n\n    public async sceneThreeCameraMovement() {\n        this.movementTween = cc\n            .tween(this.camera.node)\n            .delay(1)\n            .to(1, { y: 855 }, cc.easeCircleActionInOut())\n            .delay(1)\n            .to(2, { x: 1800 }, cc.easeCircleActionInOut())\n            .delay(1)\n            .to(3, { x: 2800, y: -35 }, cc.easeCircleActionInOut())\n            .delay(1)\n            .to(2, { x: -240, y: 25 }, cc.easeCircleActionInOut())\n            .call(() => this.cameraMovementResolve())\n            .start();\n        await new Promise((resolve) => (this.cameraMovementResolve = resolve));\n    }\n\n    public async sceneFourCameraMovement() {\n        this.movementTween = cc\n            .tween(this.camera.node)\n            .delay(1)\n            .to(1, { x: -1280, y: 1950 }, cc.easeCircleActionInOut())\n            .delay(1)\n            .to(2, { x: 2560, y: 2160 }, cc.easeCircleActionInOut())\n            .delay(1)\n            .to(1.25, { y: 800 }, cc.easeCircleActionInOut())\n            .delay(1)\n            .to(0.5, { x: 1780 }, cc.easeCircleActionInOut())\n            .delay(1)\n            .to(1.5, { x: 0, y: 873.6 }, cc.easeCircleActionInOut())\n            .call(() => this.cameraMovementResolve())\n            .start();\n        await new Promise((resolve) => (this.cameraMovementResolve = resolve));\n    }\n\n    public finalSceneSetUp() {\n        this.camera.zoomRatio = 1;\n        this.camera.node.setContentSize(new cc.Size(1280, 720));\n    }\n\n    public normalSceneSetUp() {\n        this.camera.zoomRatio = 1.6;\n        this.camera.node.setContentSize(new cc.Size(800, 450));\n    }\n\n    public reset() {\n        this.sceneManager = this.gameStage.getComponentsInChildren(SceneManager).filter((sceneManager) => sceneManager.node.active === true)[0].node;\n        this.camera.node.setPosition(this.sceneManager.getComponent(SceneManager).initialCameraPosition);\n        this.movementTween?.stop();\n        this.middleGround = this.sceneManager.getChildByName('Foreground');\n        this._isUpdate = true;\n    }\n\n    private updateNormalCameraPosition() {\n        // x coordinate\n        const cameraLeftEnd: number = this.player.node.x - this.camera.node.width / 2;\n        const cameraRightEnd: number = this.player.node.x + this.camera.node.width / 2;\n        const sceneLeftEnd: number = this.sceneManager.x + this.sceneManager.getComponent(SceneManager).getCurrentFloorEdgeOffset().x;\n        const sceneRightEnd: number = this.sceneManager.x + this.sceneManager.width + this.sceneManager.getComponent(SceneManager).getCurrentFloorEdgeOffset().y;\n        if (cameraLeftEnd >= sceneLeftEnd && cameraRightEnd <= sceneRightEnd) {\n            this.camera.node.x = this.player.node.x;\n        }\n        // y coordinate\n        const cameraTopEnd: number = this.player.node.y + this.camera.node.height / 2;\n        const cameraDownEnd: number = this.player.node.y - this.camera.node.height / 2;\n        const sceneTopEnd: number = this.sceneManager.y + this.sceneManager.height;\n        const sceneDownEnd: number = this.sceneManager.y;\n        if (cameraTopEnd <= sceneTopEnd && cameraDownEnd >= sceneDownEnd) {\n            this.camera.node.y = this.player.node.y;\n        }\n    }\n}\n\nenum CameraMode {\n    normal,\n    focus,\n    zoom,\n}\n","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CannonContact extends cc.Component {\r\n    @property(cc.Animation)\r\n    private CannonAnimation: cc.Animation = null;\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    private isHit: boolean = false;\r\n\r\n    onLoad() {\r\n        this.CannonAnimation.on('play', () => {\r\n            this.node.active = true;\r\n            if (this.CannonAnimation.currentClip.name === 'Explosion') {\r\n                this.node.group = 'Skill';\r\n            } else {\r\n                this.node.group = 'Damage';\r\n            }\r\n        });\r\n        this.CannonAnimation.on('finished', () => {\r\n            if (this.CannonAnimation.currentClip.name === 'Explosion') {\r\n                this.node.group = 'Damage';\r\n            } else {\r\n                this.node.group = 'Skill';\r\n            }\r\n            if (this.isHit) {\r\n                this.node.active = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\r\n        if (other.node.group === 'default' || other.node.group === 'Monster') {\r\n            cc.audioEngine.playEffect(this.sound, false);\r\n            this.CannonAnimation.play('Explosion');\r\n            if (other.node.group === 'Monster') {\r\n                this.isHit = true;\r\n            } else {\r\n                this.isHit = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.isHit = false;\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\nimport CannonContact from './CannonContact';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CannonMechanism extends TimeEffect {\r\n    @property(cc.Animation)\r\n    private CannonBody: cc.Animation = null;\r\n    @property(cc.Animation)\r\n    private CannonMap: cc.Animation = null;\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    onLoad() {\r\n        this.status = 'triggered';\r\n        this.CannonBody.on('finished', () => {\r\n            if (this.CannonBody.currentClip.name === 'CannonFlyOut') {\r\n                cc.audioEngine.playEffect(this.sound, false);\r\n                this.CannonMap.play('MapBreak');\r\n            }\r\n        });\r\n    }\r\n\r\n    public rollback() {\r\n        this.status = 'original';\r\n        this.CannonMap.play('MapBuild');\r\n        cc.audioEngine.playEffect(this.sound, false);\r\n        this.CannonBody.play('CannonFlyBack');\r\n    }\r\n\r\n    public accelerate() {\r\n        this.status = 'triggered';\r\n        this.CannonBody.play('CannonFlyOut');\r\n    }\r\n\r\n    public slowdown() {}\r\n\r\n    public reset() {\r\n        this.status = 'triggered';\r\n        this.CannonMap.play('MapBreak');\r\n        this.CannonBody.node.setPosition(1580, 180);\r\n        this.CannonBody.getComponent(CannonContact).reset();\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CannonRock extends TimeEffect {\r\n    @property(cc.Animation)\r\n    private CannonBody: cc.Animation = null;\r\n    @property(cc.Boolean)\r\n    private rockStatus: boolean = false;\r\n    @property(cc.Node)\r\n    private rockSprite: cc.Node = null;\r\n    @property(cc.Node)\r\n    private sandParticle: cc.Node = null;\r\n    @property(cc.Animation)\r\n    private RockBody: cc.Animation = null;\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    onLoad() {\r\n        this.status = 'original';\r\n        this.rockSprite.active = false;\r\n        this.CannonBody.on('finished', () => {\r\n            if (this.CannonBody.currentClip.name === 'Explosion') {\r\n                this.rockStatus = true;\r\n                this.rockSprite.active = true;\r\n                this.sandParticle.active = true;\r\n            }\r\n        });\r\n        this.RockBody.on('play', () => {\r\n            this.RockBody.node.active = true;\r\n        });\r\n        this.RockBody.on('finished', () => {\r\n            if (this.RockBody.currentClip.name === 'RockFallen') {\r\n                this.RockBody.node.active = false;\r\n            } else if (this.RockBody.currentClip.name === 'RockReturn' && this.rockStatus) {\r\n                this.sandParticle.active = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public rollback() {\r\n        if (this.rockStatus) {\r\n            this.status = 'original';\r\n            this.RockBody.play('RockReturn');\r\n        }\r\n    }\r\n\r\n    public accelerate() {\r\n        if (this.rockStatus) {\r\n            this.status = 'triggered';\r\n            this.sandParticle.active = false;\r\n            cc.audioEngine.playEffect(this.sound, false);\r\n            this.RockBody.play('RockFallen');\r\n        }\r\n    }\r\n\r\n    public slowdown() {}\r\n\r\n    public reset() {\r\n        this.status = 'triggered';\r\n        this.rockStatus = true;\r\n        this.rollback();\r\n        this.rockStatus = false;\r\n        this.rockSprite.active = false;\r\n        this.sandParticle.active = false;\r\n    }\r\n}\r\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport Bullet from './Bullet';\nimport PlayerManager from '../Player/PlayerManager';\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class climbingMonster extends cc.Component {\n\n    @property(cc.Prefab)\n    private bullet: cc.Prefab = null;\n\n    @property(cc.Animation)\n    private monsterAnimation: cc.Animation = null;\n\n    @property(cc.Prefab)\n    private monsterDeathAnimation: cc.Prefab = null;\n\n    @property(cc.AudioClip)\n    private shootEffect: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private deathEffect: cc.AudioClip = null;\n\n    @property\n    private jumpFroce: number = 0;\n\n    private jump: boolean = false;\n    private death: boolean = false;\n    private player: cc.Node = null; // 透過碰撞測試取得\n    private jumpLocker: boolean = true;\n\n    update (dt: number) {\n        if(this.jump && this.jumpLocker) {\n            this.jumpLocker = false;\n            this.playJumpAnimation();\n            let lv = this.node.getComponent(cc.RigidBody).linearVelocity;\n            lv.x = this.jumpFroce;\n            lv.y = this.jumpFroce * 0.8;\n            this.getComponent(cc.RigidBody).linearVelocity = lv;\n        }\n    }\n\n    onLoad() {\n        this.monsterAnimation.on('finished', this.playClimingAnimation, this);\n    }\n\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\n        if (self.tag === 0 && other.node.name === 'Player') {\n            this.jump = true;\n            this.player = other.node;\n            this.schedule(this.playShootAnimation, 3, cc.macro.REPEAT_FOREVER, 1);\n        }\n        if (self.tag === 1 &&　other.node.name === 'Deadline') {\n            this.playDeathAnimation();\n            this.node.destroy();\n        }\n        if(self.tag === 2 && other.node.name === 'VineBody') {\n            const rigidBody: cc.RigidBody = self.getComponent(cc.RigidBody);\n            rigidBody.type = cc.RigidBodyType.Kinematic;\n            rigidBody.linearVelocity = new cc.Vec2(0, 0);\n        }\n    }\n\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\n        // 結束攀爬\n        if (other.node.name === 'VineBody' && !this.death) {\n            const rigidBody: cc.RigidBody = self.getComponent(cc.RigidBody);\n            rigidBody.type = cc.RigidBodyType.Dynamic;\n            this.unscheduleAllCallbacks();\n            this.playIdleAnimation();\n        }\n    }\n\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\n        if (other.node.group === 'Damage') {\n            this.death = true;\n            this.playDeathAnimation();\n            this.node.destroy();\n        }\n    }\n\n    private playIdleAnimation() {\n        if (this.monsterAnimation.currentClip?.name !== 'RangedMonsterIdle') {\n            this.monsterAnimation.play('RangedMonsterIdle');\n        }\n    }\n\n    private playClimingAnimation() {\n        if (this.monsterAnimation.currentClip?.name !== 'monsterClimingIdle') {\n            this.monsterAnimation.play('monsterClimingIdle');\n        }\n    }\n\n    private playJumpAnimation() {\n        if(this.monsterAnimation.currentClip?.name !== 'monsterJump') {\n            this.monsterAnimation.play('monsterJump');\n        }\n    }\n\n    private playShootAnimation() {  \n        cc.audioEngine.playEffect(this.shootEffect, false);\n        this.monsterAnimation.play('monsterShoot');\n        this.schedule(this.shootBullet,0.5,0);\n    }\n\n    private playDeathAnimation() {\n        cc.audioEngine.playEffect(this.deathEffect, false);\n        let anim = cc.instantiate(this.monsterDeathAnimation);\n        anim.setPosition(this.node.getPosition());\n        anim.scaleX = this.node.scaleX;\n        this.node.parent.addChild(anim);\n        anim.getComponent(cc.Animation).play('RangedMonsterDeath');\n    }\n\n    private shootBullet() {\n        if (!this.player.getComponent(PlayerManager).status) {\n            this.unschedule(this.playShootAnimation);\n            return;\n        }\n        const monsterWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        const bullet: cc.Node = cc.instantiate(this.bullet);\n        const distanceX = this.player.parent.convertToNodeSpaceAR(monsterWorldPos).x - this.player.x;\n        const distanceY = this.player.parent.convertToNodeSpaceAR(monsterWorldPos).y - this.player.y;\n\n        bullet.setPosition(monsterWorldPos);\n        this.node.parent.addChild(bullet);\n\n        //計算子彈要射擊的角度\n        const radian = Math.atan(distanceY / distanceX);\n        let angle = (radian * 180) / Math.PI;\n        if (distanceX > 0) {\n            angle += 180;\n        }\n        //將子彈射擊(移動)速度和角度傳參數給子彈節點\n        bullet.children[0].getComponent(Bullet).setBulletParameter(500, angle);\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ClockButtonMechanism extends cc.Component {\n    @property(cc.SpriteFrame)\n    private nonActivedSpriteFrame: cc.SpriteFrame = null;\n\n    @property(cc.AudioClip)\n    private buttonEffect: cc.AudioClip = null;\n\n    public isActived: boolean = false;\n\n    public active() {\n        this.isActived = true;\n        this.node.getComponent(cc.Animation).play();\n        this.node.emit('active');\n    }\n\n    public reset() {\n        this.node.getComponent(cc.Sprite).spriteFrame = this.nonActivedSpriteFrame;\n        this.isActived = false;\n    }\n\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\n        if (other.node.name === 'Player' && !this.isActived) {\n            const id: number = cc.audioEngine.playEffect(this.buttonEffect, false);\n            cc.audioEngine.setVolume(id, 1);\n            this.active();\n        }\n    }\n}\n","import TimeEffect from '../../TimeEffect';\r\nimport { SkillSet } from '../../Player/PlayerManager';\r\nimport VineMechanism from '../Mechanism/FirstScene/VineMechanism';\r\nimport ClockButtonMechanism from './ClockButtonMechanism';\r\nimport StretchPlatformMechanism from '../StretchPlatformMechanism';\r\nimport AcceEnergeRockMechanism from '../AcceEnergeRock';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ClockMechanism extends TimeEffect {\r\n    @property(cc.Node)\r\n    public hourHand: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    public minuteHand: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private stair: cc.Node = null;\r\n\r\n    @property(cc.Label)\r\n    private timeTxt: cc.Label = null;\r\n\r\n    @property(VineMechanism)\r\n    private vine: VineMechanism = null;\r\n\r\n    @property([ClockButtonMechanism])\r\n    private clockButtons: ClockButtonMechanism[] = [];\r\n\r\n    @property([cc.Node])\r\n    private floors: cc.Node[] = [];\r\n\r\n    @property(cc.Node)\r\n    private directionStone: cc.Node = null;\r\n\r\n    @property([AcceEnergeRockMechanism])\r\n    private energeRocks: AcceEnergeRockMechanism[] = [];\r\n\r\n    @property(cc.Node)\r\n    private transferPoint: cc.Node = null;\r\n\r\n    @property(cc.Sprite)\r\n    private door: cc.Sprite = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    private doorUnopened: cc.SpriteFrame = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    private doorOpened: cc.SpriteFrame = null;\r\n\r\n    @property(cc.AudioClip)\r\n    private doorEffect: cc.AudioClip = null;\r\n\r\n    @property(cc.AudioClip)\r\n    private bellEffect: cc.AudioClip = null;\r\n\r\n    @property\r\n    private secondPerCircle: number = 0;\r\n\r\n    @property\r\n    private isClockWise: boolean = true;\r\n\r\n    private hourHandTween: cc.Tween = null;\r\n    private minuteHandTween: cc.Tween = null;\r\n    private speedOptions: number[] = [1 / 243, 1, 5];\r\n    private currentSpeedIdx: number = 1;\r\n    private currentHour: number = 0;\r\n    private currentMinute: number = 15;\r\n    private isBellPlayed: boolean = false;\r\n\r\n    public reset() {\r\n        // Clock\r\n        this.clockStop();\r\n        this.isClockWise = true;\r\n        this.currentSpeedIdx = 1;\r\n        this.currentHour = 0;\r\n        this.currentMinute = 15;\r\n        this.hourHand.angle = -7.5;\r\n        this.minuteHand.angle = 0;\r\n        this.clockStart();\r\n        this.vine.reset();\r\n        this.clockButtons.forEach((button) => button.reset());\r\n        this.floors[1].getComponent(StretchPlatformMechanism).reset();\r\n        this.floors[2].getComponent(StretchPlatformMechanism).reset();\r\n        this.directionStone.angle = 180;\r\n        this.door.spriteFrame = this.doorUnopened;\r\n        this.transferPoint.name = 'UnActivedTransferPoint';\r\n        this.isBellPlayed = false;\r\n    }\r\n\r\n    onLoad() {\r\n        this.node.zIndex = -1;\r\n        this.status = 'normal';\r\n        this.clockButtons.forEach((button) => {\r\n            button.node.on('active', () => {\r\n                if (this.clockButtons.filter((button) => button.isActived === true).length === 3) {\r\n                    this.door.spriteFrame = this.doorOpened;\r\n                    this.transferPoint.name = 'TransferPoint';\r\n                    cc.audioEngine.playEffect(this.doorEffect, false);\r\n                }\r\n            });\r\n        });\r\n        this.directionStone.on('onClick', (skill: SkillSet) => this.onMultiFuncionDirectionStoneClick(skill));\r\n        this.clockStart();\r\n    }\r\n\r\n    update() {\r\n        // Stair\r\n        if (this.currentHour === 0 || this.currentHour === 3 || this.currentHour === 6 || this.currentHour === 9) {\r\n            this.stair.active = true;\r\n            if (!this.isBellPlayed) {\r\n                const id: number = cc.audioEngine.playEffect(this.bellEffect, false);\r\n                cc.audioEngine.setVolume(id, 0.8);\r\n                this.isBellPlayed = true;\r\n            }\r\n        } else {\r\n            this.stair.active = false;\r\n            this.isBellPlayed = false;\r\n        }\r\n        // Floor\r\n        this.floors[0].active = this.currentMinute >= 0 && this.currentMinute <= 30;\r\n        this.floors[3].active = this.currentMinute >= 31 && this.currentMinute <= 59;\r\n        this.floors[4].active = this.currentMinute >= 0 && this.currentMinute <= 40;\r\n        // StretchFloor\r\n        if ((this.currentMinute === 25 && this.isClockWise) || (this.currentMinute === 55 && !this.isClockWise)) {\r\n            this.floors[1].getComponent(StretchPlatformMechanism).stretch();\r\n            this.floors[2].getComponent(StretchPlatformMechanism).stretch();\r\n        } else if ((this.currentMinute === 40 && this.isClockWise) || (this.currentMinute === 40 && !this.isClockWise)) {\r\n            this.floors[1].getComponent(StretchPlatformMechanism).shrink();\r\n            this.floors[2].getComponent(StretchPlatformMechanism).shrink();\r\n        }\r\n        // Energe Stone\r\n        switch (this.currentHour) {\r\n            case 0:\r\n                this.directionStone.angle = 90;\r\n                break;\r\n            case 1:\r\n            case 2: {\r\n                this.directionStone.angle = 60;\r\n                break;\r\n            }\r\n            case 3:\r\n                this.directionStone.angle = 0;\r\n                break;\r\n            case 4:\r\n            case 5:\r\n                this.directionStone.angle = 330;\r\n                break;\r\n            case 6:\r\n                this.directionStone.angle = 270;\r\n                break;\r\n            case 7:\r\n            case 8:\r\n                this.directionStone.angle = 210;\r\n                break;\r\n            case 9:\r\n                this.directionStone.angle = 180;\r\n                break;\r\n            case 10:\r\n            case 11:\r\n                this.directionStone.angle = 150;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    public accelerate() {\r\n        if (this.currentSpeedIdx !== 2) {\r\n            this.currentSpeedIdx++;\r\n            console.log(`current speed index ${this.currentSpeedIdx}`);\r\n            this.floors[1].getComponent(StretchPlatformMechanism).changeSpeed(this.speedOptions[this.currentSpeedIdx]);\r\n            this.floors[2].getComponent(StretchPlatformMechanism).changeSpeed(this.speedOptions[this.currentSpeedIdx]);\r\n            (this.hourHandTween as any)._finalAction._speed = this.speedOptions[this.currentSpeedIdx];\r\n            (this.minuteHandTween as any)._finalAction._speed = this.speedOptions[this.currentSpeedIdx];\r\n            this.floors[1].getComponent(StretchPlatformMechanism).changeSpeed(this.speedOptions[this.currentSpeedIdx]);\r\n            this.floors[2].getComponent(StretchPlatformMechanism).changeSpeed(this.speedOptions[this.currentSpeedIdx]);\r\n        }\r\n    }\r\n\r\n    public slowdown() {\r\n        if (this.currentSpeedIdx !== 0) {\r\n            this.currentSpeedIdx--;\r\n            console.log(`current speed index ${this.currentSpeedIdx}`);\r\n            this.floors[1].getComponent(StretchPlatformMechanism).changeSpeed(this.speedOptions[this.currentSpeedIdx]);\r\n            this.floors[2].getComponent(StretchPlatformMechanism).changeSpeed(this.speedOptions[this.currentSpeedIdx]);\r\n            (this.hourHandTween as any)._finalAction._speed = this.speedOptions[this.currentSpeedIdx];\r\n            (this.minuteHandTween as any)._finalAction._speed = this.speedOptions[this.currentSpeedIdx];\r\n            this.floors[1].getComponent(StretchPlatformMechanism).changeSpeed(this.speedOptions[this.currentSpeedIdx]);\r\n            this.floors[2].getComponent(StretchPlatformMechanism).changeSpeed(this.speedOptions[this.currentSpeedIdx]);\r\n        }\r\n    }\r\n\r\n    public rollback() {\r\n        this.isClockWise = !this.isClockWise;\r\n        this.clockStop();\r\n        this.clockStart(this.speedOptions[this.currentSpeedIdx]);\r\n        this.floors[1].getComponent(StretchPlatformMechanism).changeDirection();\r\n        this.floors[2].getComponent(StretchPlatformMechanism).changeDirection();\r\n    }\r\n\r\n    private clockStart(speed?: number) {\r\n        this.hourHandTween = cc\r\n            .tween(this.hourHand)\r\n            .by(this.secondPerCircle * 12, { angle: 360 * (this.isClockWise ? -1 : 1) })\r\n            .repeatForever()\r\n            .start();\r\n        this.minuteHandTween = cc\r\n            .tween(this.minuteHand)\r\n            .by(this.secondPerCircle / 60, { angle: 6 * (this.isClockWise ? -1 : 1) })\r\n            .call(() => {\r\n                if (this.isClockWise) {\r\n                    this.currentMinute++;\r\n                    if (this.currentMinute === 60) {\r\n                        this.currentMinute = 0;\r\n                        this.currentHour++;\r\n                        if (this.currentHour === 12) {\r\n                            this.currentHour = 0;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.currentMinute--;\r\n                    if (this.currentMinute === -1) {\r\n                        this.currentMinute = 59;\r\n                        this.currentHour--;\r\n                        if (this.currentHour === -1) {\r\n                            this.currentHour = 11;\r\n                        }\r\n                    }\r\n                }\r\n                this.timeTxt.string = `${this.currentHour >= 10 ? '' : '0'}${this.currentHour} : ${this.currentMinute >= 10 ? '' : '0'}${this.currentMinute}`;\r\n            })\r\n            .union()\r\n            .repeatForever()\r\n            .start();\r\n        (this.hourHandTween as any)._finalAction._speedMethod = true;\r\n        (this.minuteHandTween as any)._finalAction._speedMethod = true;\r\n        (this.hourHandTween as any)._finalAction._speed = speed ?? 1;\r\n        (this.minuteHandTween as any)._finalAction._speed = speed ?? 1;\r\n    }\r\n\r\n    private clockStop() {\r\n        this.hourHandTween.stop();\r\n        this.minuteHandTween.stop();\r\n    }\r\n\r\n    private onMultiFuncionDirectionStoneClick(skill: SkillSet) {\r\n        switch (this.directionStone.angle) {\r\n            case 90:\r\n                break;\r\n            case 60:\r\n                if (this.floors[4].active === false && this.vine.checkStatus(skill)) {\r\n                    if (skill === SkillSet.accelerate) {\r\n                        this.vine.accelerate();\r\n                    } else if (skill === SkillSet.rollback) {\r\n                        this.vine.rollback();\r\n                    } else if (skill === SkillSet.slowdown) {\r\n                        this.vine.slowdown();\r\n                    }\r\n                }\r\n                break;\r\n            case 330:\r\n                this.energeRocks[0].accelerate();\r\n                break;\r\n            case 210:\r\n                this.energeRocks[1].accelerate();\r\n                break;\r\n            case 180:\r\n                if (skill === SkillSet.accelerate) {\r\n                    this.accelerate();\r\n                } else if (skill === SkillSet.rollback) {\r\n                    this.rollback();\r\n                } else if (skill === SkillSet.slowdown) {\r\n                    this.slowdown();\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import ClockMechanism from './ClockMechanism';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ClockPlatform extends cc.Component {\r\n    @property(ClockMechanism)\r\n    private clock: ClockMechanism = null;\r\n\r\n    @property(cc.Node)\r\n    private hourPlatform: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private minutePlatform: cc.Node = null;\r\n\r\n    @property\r\n    private hourHandRadius: number = 0;\r\n\r\n    @property\r\n    private minuteHandRadius: number = 0;\r\n\r\n    update() {\r\n        this.hourPlatform.setPosition(this.angleToPosition(this.clock.hourHand.angle + 90, this.hourHandRadius));\r\n        this.minutePlatform.setPosition(this.angleToPosition(this.clock.minuteHand.angle, this.minuteHandRadius));\r\n    }\r\n\r\n    private angleToPosition(angle: number, radius: number) {\r\n        while (angle < 360) {\r\n            angle += 360;\r\n        }\r\n        while (angle - 360 > 0) {\r\n            angle -= 360;\r\n        }\r\n        return new cc.Vec2(radius * Math.cos(this.angleToRadians(angle)), radius * Math.sin(this.angleToRadians(angle)));\r\n    }\r\n\r\n    private angleToRadians(angle: number) {\r\n        return (angle * Math.PI) / 180;\r\n    }\r\n}\r\n","const { ccclass } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CrossFloor extends cc.Component {\r\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        if (other.node.name === 'Player') {\r\n            this.node.emit('crossFloor');\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport TimeEffect from '../TimeEffect'\nimport JaggedMechanism from './JaggedMechanism'\nimport WeaponBody from '../Monster/WeaponBody'\n\nexport enum skillType {\n    none = -1,\n    accelerate,\n    slowdown,\n    rollback,\n}\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class DirectionRock extends TimeEffect {\n\n    onLoad() {\n        this.status = 'normal';\n    }\n\n    public accelerate() {\n        this.shootRay(skillType.accelerate);\n    }\n\n    public slowdown() {\n        this.shootRay(skillType.slowdown);\n    }\n\n    public rollback() {\n        this.shootRay(skillType.rollback);\n    }\n\n    private shootRay(type: skillType) {\n        const tempPoint: cc.Vec3 = this.node.parent.convertToWorldSpaceAR(this.node.position);\n        let rayP1 = cc.v2(tempPoint.x, tempPoint.y);\n        let rayP2;\n        const angle = Math.round(this.node.angle);\n        if(angle === 0) {\n            rayP2 = cc.v2(tempPoint.x + 2000, tempPoint.y);\n        } else if(angle === 90) {\n            rayP2 = cc.v2(tempPoint.x, tempPoint.y + 1000);\n        } else if(angle === 180) {\n            rayP2 = cc.v2(tempPoint.x - 2000, tempPoint.y);\n        } else if(angle === 270) {\n            rayP2 = cc.v2(tempPoint.x, tempPoint.y - 1000);\n        }\n        const rayResults = cc.director.getPhysicsManager().rayCast(rayP1, rayP2, cc.RayCastType.AllClosest);\n        for(let i = 0; i < rayResults.length; i++){\n            const collider = rayResults[i].collider;\n            if(collider.node.name === 'JaggedBody') {\n                switch(type) {\n                    case skillType.accelerate:\n                        collider.node.parent.getComponent(JaggedMechanism).skillCaseFromDR(true);\n                        collider.node.parent.getComponent(JaggedMechanism).accelerate();\n                        collider.node.parent.getComponent(JaggedMechanism).skillCaseFromDR(false);\n                        break;\n                    case skillType.slowdown:\n                        collider.node.parent.getComponent(JaggedMechanism).skillCaseFromDR(true);\n                        collider.node.parent.getComponent(JaggedMechanism).slowdown();\n                        collider.node.parent.getComponent(JaggedMechanism).skillCaseFromDR(false);\n                        break;\n                    case skillType.rollback:\n                        collider.node.parent.getComponent(JaggedMechanism).skillCaseFromDR(true);\n                        collider.node.parent.getComponent(JaggedMechanism).rollback();\n                        collider.node.parent.getComponent(JaggedMechanism).skillCaseFromDR(false);\n                        break;\n                }\n                break;\n            } else if(collider.node.name === 'BossWeapon') {\n                switch(type) {\n                    case skillType.accelerate:\n                        collider.node.children[0].getComponent(WeaponBody).accelerate();\n                        break;\n                    case skillType.slowdown:\n                        collider.node.children[0].getComponent(WeaponBody).slowdown();\n                        break;\n                    case skillType.rollback:\n                        collider.node.children[0].getComponent(WeaponBody).rollback();\n                        break;\n                }\n                break;\n            }\n        }\n    }\n\n    public reset() {}\n    \n}\n","import TimeEffect from '../TimeEffect';\nimport { SkillSet } from '../Player/PlayerManager';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class DirectionStone extends TimeEffect {\n    onLoad() {\n        this.status = 'normal';\n    }\n\n    public accelerate() {\n        this.node.emit('onClick', SkillSet.accelerate);\n    }\n\n    public slowdown() {\n        this.node.emit('onClick', SkillSet.slowdown);\n    }\n\n    public rollback() {\n        this.node.emit('onClick', SkillSet.rollback);\n    }\n\n    public reset() {}\n}\n","import TimeEffect from '../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ElevatorManager extends TimeEffect {\r\n    @property([cc.Node])\r\n    private chains: cc.Node[] = [];\r\n\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    private downAnimationState: cc.AnimationState = null;\r\n    private upAnimationState: cc.AnimationState = null;\r\n    private stayAnimationState: cc.AnimationState = null;\r\n    private chainOneTween: cc.Tween = null;\r\n    private chainTwoTween: cc.Tween = null;\r\n    private currentSpeedRatio: number = 1;\r\n    private effectID: number = null;\r\n\r\n    onLoad() {\r\n        this.chains[0].zIndex = -1;\r\n        this.chains[1].zIndex = -1;\r\n        this.node.getComponent(cc.Animation).on('finished', this.elevatorControl, this);\r\n        this.downAnimationState = this.node.getComponent(cc.Animation).getAnimationState('elevatorDown');\r\n        this.upAnimationState = this.node.getComponent(cc.Animation).getAnimationState('elevatorReturn');\r\n        this.stayAnimationState = this.node.getComponent(cc.Animation).getAnimationState('elevatorStaying');\r\n    }\r\n\r\n    public elevatorTriggered() {\r\n        this.reset();\r\n        this.node.getComponent(cc.Animation).play('elevatorDown');\r\n        this.effectID = cc.audioEngine.playEffect(this.sound, true);\r\n        cc.audioEngine.setVolume(this.effectID, 0.3);\r\n        this.chainOneTween = cc.tween(this.chains[0]).to(1, { y: 593 }).start();\r\n        this.chainTwoTween = cc.tween(this.chains[1]).to(1, { y: 593 }).start();\r\n        (this.chainOneTween as any)._finalAction._speedMethod = true;\r\n        (this.chainTwoTween as any)._finalAction._speedMethod = true;\r\n        this.onChangeSpeed('normal');\r\n    }\r\n\r\n    // 為了能讓 sceneManager call reset 所以要繼承 TimeEffect\r\n    public accelerate() {}\r\n    public slowdown() {}\r\n    public rollback() {}\r\n\r\n    public reset() {\r\n        this.node.getComponent(cc.Animation).stop();\r\n        cc.audioEngine.stopEffect(this.effectID);\r\n        this.chainOneTween?.stop();\r\n        this.chainTwoTween?.stop();\r\n        this.node.position.y = 235;\r\n        this.chains[0].y = 830;\r\n        this.chains[1].y = 830;\r\n    }\r\n\r\n    private elevatorControl() {\r\n        if (this.node.getComponent(cc.Animation).currentClip?.name === 'elevatorDown') {\r\n            // 電梯向下結束\r\n            this.node.getComponent(cc.Animation).play('elevatorStaying');\r\n            cc.audioEngine.stopEffect(this.effectID);\r\n            this.onChangeSpeed('specific');\r\n        } else if (this.node.getComponent(cc.Animation).currentClip?.name === 'elevatorStaying') {\r\n            // 電梯停留結束\r\n            this.node.getComponent(cc.Animation).play('elevatorReturn');\r\n            this.effectID = cc.audioEngine.playEffect(this.sound, true);\r\n            cc.audioEngine.setVolume(this.effectID, 0.3);\r\n            this.chainOneTween = cc.tween(this.chains[0]).to(1, { y: 830 }).start();\r\n            this.chainTwoTween = cc.tween(this.chains[1]).to(1, { y: 830 }).start();\r\n            (this.chainOneTween as any)._finalAction._speedMethod = true;\r\n            (this.chainTwoTween as any)._finalAction._speedMethod = true;\r\n            this.onChangeSpeed('set');\r\n        } else if (this.node.getComponent(cc.Animation).currentClip?.name === 'elevatorReturn') {\r\n            // 電梯向上結束\r\n            cc.audioEngine.stopEffect(this.effectID);\r\n        }\r\n    }\r\n\r\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        if (other.node.name === 'EnergyRockSkillArea') {\r\n            // 判斷當前能量球效果\r\n            this.onChangeSpeed('slowdown');\r\n        }\r\n    }\r\n\r\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\r\n        if (other.node.name === 'EnergyRockSkillArea') {\r\n            this.onChangeSpeed('normal');\r\n        }\r\n    }\r\n\r\n    private onChangeSpeed(speed: 'normal' | 'slowdown' | 'speedup' | 'set' | 'specific') {\r\n        // set: 使用當前速率  specific: 使用特定速率但不保留 (for stayAnimation);\r\n        let originSpeedRatio: number = null;\r\n        switch (speed) {\r\n            case 'normal':\r\n                this.currentSpeedRatio = 1;\r\n                break;\r\n            case 'slowdown':\r\n                this.currentSpeedRatio = 1 / 15;\r\n                break;\r\n            case 'speedup':\r\n                this.currentSpeedRatio = 2;\r\n                break;\r\n            case 'set':\r\n                break;\r\n            case 'specific':\r\n                originSpeedRatio = this.currentSpeedRatio;\r\n                this.currentSpeedRatio = 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.downAnimationState.speed = this.currentSpeedRatio;\r\n        this.upAnimationState.speed = this.currentSpeedRatio;\r\n        this.stayAnimationState.speed = this.currentSpeedRatio;\r\n        (this.chainOneTween as any)._finalAction._speed = this.currentSpeedRatio;\r\n        (this.chainTwoTween as any)._finalAction._speed = this.currentSpeedRatio;\r\n        if (speed === 'specific') {\r\n            this.currentSpeedRatio = originSpeedRatio;\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport TimeEffect from '../TimeEffect';\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class EnergyRock extends TimeEffect {\r\n    @property(cc.Sprite)\r\n    private energyRock: cc.Sprite = null;\r\n\r\n    private isOpen: boolean = false;\r\n\r\n    onLoad() {\r\n        this.status = 'normal';\r\n    }\r\n\r\n    public rollback() {}\r\n\r\n    public accelerate() {}\r\n\r\n    public slowdown() {\r\n        if (this.isOpen) {\r\n            this.reset();\r\n            this.node.emit('status', 'normal');\r\n        } else {\r\n            this.isOpen = true;\r\n            this.energyRock.enabled = true;\r\n            this.energyRock.getComponent(cc.CircleCollider).radius = 196;\r\n            this.node.emit('status', 'slowdown');\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.status = 'normal';\r\n        this.isOpen = false;\r\n        this.energyRock.enabled = false;\r\n        this.energyRock.getComponent(cc.CircleCollider).radius = 0;\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ExitRockMechanism extends TimeEffect {\r\n    @property(cc.Animation)\r\n    private exit: cc.Animation = null;\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider){\r\n        \r\n        if (other.node.name === 'rollingRock') {\r\n            this.getComponent(cc.PhysicsBoxCollider).enabled = false;\r\n            cc.audioEngine.playEffect(this.sound,false); \r\n            this.exit.play('rockBreak');\r\n        }\r\n    }\r\n    //============================================\r\n    public rollback() {}\r\n\r\n    public accelerate() {}\r\n    public slowdown() {}\r\n    \r\n    public reset() {\r\n        this.exit.play('rockBuild');\r\n        this.getComponent(cc.PhysicsBoxCollider).enabled = true;\r\n    }\r\n}\r\n\r\n","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n    @property\r\n    private dropSpeed: number = 0;\r\n\r\n    @property\r\n    private initial_y: number = 0;\r\n\r\n    @property\r\n    private target_y: number = 0;\r\n    \r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    public isDrop: boolean = false;\r\n    private firstTime: boolean = true;\r\n    private currentTween: cc.Tween = null;\r\n\r\n    public reset() {\r\n        this.currentTween?.stop();\r\n        this.isDrop = false;\r\n        this.firstTime = true;\r\n        this.node.y = this.initial_y;\r\n    }\r\n\r\n    public rollback() {\r\n        this.currentTween.stop();\r\n        this.currentTween = cc.tween(this.node).to(this.dropSpeed, { y: this.initial_y }).start();\r\n    }\r\n\r\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\r\n        if (other.node.group === 'default' && this.firstTime === true) {\r\n            this.isDrop = true;\r\n            this.firstTime = false;\r\n            cc.audioEngine.playEffect(this.sound,false);\r\n            this.currentTween = cc.tween(this.node).to(this.dropSpeed, { y: this.target_y }).start();\r\n        }\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FallenRockMechanism extends TimeEffect {\r\n    @property\r\n    private dropSpeed: number = 0;\r\n\r\n    @property\r\n    private intial_y: number = 0;\r\n\r\n    @property\r\n    private target_y: number = 0;\r\n\r\n    @property\r\n    private needRemainDisplaying: boolean = false;\r\n\r\n    @property\r\n    private isTriggered: boolean = false;\r\n\r\n    @property\r\n    private isColliderMoving: boolean = false;\r\n\r\n    @property\r\n    private isResetTriggered: boolean = false;\r\n\r\n    @property(cc.Sprite)\r\n    private rock: cc.Sprite = null;\r\n\r\n    @property(cc.Node)\r\n    private sandParticle: cc.Node = null;\r\n\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    onLoad() {\r\n        this.status = this.isTriggered ? 'triggered' : 'original';\r\n    }\r\n\r\n    public rollback() {\r\n        this.status = 'transforming';\r\n        this.rock.node.active = true;\r\n        cc.tween(this.rock.node)\r\n            .to(this.dropSpeed, { y: this.intial_y })\r\n            .call(() => {\r\n                this.status = 'original';\r\n                this.sandParticle.active = true;\r\n                if (this.isColliderMoving) {\r\n                    this.node.getComponent(cc.BoxCollider).offset.y = this.intial_y;\r\n                }\r\n            })\r\n            .start();\r\n    }\r\n\r\n    public accelerate() {\r\n        cc.audioEngine.playEffect(this.sound, false);\r\n        this.status = 'transforming';\r\n        cc.tween(this.rock.node)\r\n            .to(this.dropSpeed, { y: this.target_y })\r\n            .call(() => {\r\n                this.rock.node.active = this.needRemainDisplaying;\r\n                this.status = 'triggered';\r\n                this.sandParticle.active = false;\r\n                if (this.isColliderMoving) {\r\n                    this.node.getComponent(cc.BoxCollider).offset.y = this.target_y;\r\n                }\r\n            })\r\n            .start();\r\n    }\r\n\r\n    public slowdown() {}\r\n\r\n    public reset() {\r\n        if (this.isResetTriggered) {\r\n            this.status = 'transforming';\r\n            this.sandParticle.active = false;\r\n            cc.tween(this.rock.node)\r\n                .to(this.dropSpeed, { y: this.target_y })\r\n                .call(() => {\r\n                    this.rock.node.active = this.needRemainDisplaying;\r\n                    this.status = 'triggered';\r\n                    if (this.isColliderMoving) {\r\n                        this.node.getComponent(cc.BoxCollider).offset.y = this.target_y;\r\n                    }\r\n                })\r\n                .start();\r\n        } else {\r\n            this.rock.node.active = true;\r\n            this.rollback();\r\n        }\r\n    }\r\n}\r\n","import MenuController from './Menu/MenuController';\nimport MainMenuController from './Menu/MainMenuController';\nimport TransitionController from './TransitionController';\nimport CameraController from './CameraController';\nimport PlayerManager from './Player/PlayerManager';\nimport SceneManager from './Scene/SceneManager';\nimport NarratorManager from './Narrator/NarratorManager';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GameController extends cc.Component {\n    @property(MainMenuController)\n    private mainMenu: MainMenuController = null;\n\n    @property(MenuController)\n    private menu: MenuController = null;\n\n    @property(PlayerManager)\n    private player: PlayerManager = null;\n\n    @property(cc.Node)\n    private boss: cc.Node = null;\n\n    @property(CameraController)\n    private camera: CameraController = null;\n\n    @property([cc.Node])\n    private sceneNodes: cc.Node[] = [];\n\n    @property(SceneManager)\n    private currentScene: SceneManager = null;\n\n    @property(TransitionController)\n    private transition: TransitionController = null;\n\n    @property(NarratorManager)\n    private narrator: NarratorManager = null;\n\n    @property(cc.AudioClip)\n    private bgmCave: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private bgmCastle: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private bgmBoss: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private bgmMainMenu: cc.AudioClip = null;\n\n    @property\n    private musicVolume: number = 0;\n\n    @property\n    private effectVolume: number = 0;\n\n    private currentSceneIdx: number = 0;\n    private transitionPromise: (value: any) => void = null;\n\n    onLoad() {\n        cc.game.setFrameRate(30);\n        cc.audioEngine.setMusicVolume(this.musicVolume);\n        cc.audioEngine.setEffectsVolume(this.effectVolume);\n        this.mainMenu.node.on('enterFirstScene', () => {\n            this.player.status = true;\n            cc.audioEngine.playMusic(this.bgmCave, true);\n        });\n        this.menu.node.on('back', () => {\n            this.player.status = false;\n            this.transferStage(0, true);\n            this.mainMenu.node.active = true;\n        });\n        this.transition.node.on('back', (isWin: boolean) => {\n            this.player.status = false;\n            if (isWin) {\n                this.transferStage(0, true);\n                this.mainMenu.node.active = true;\n            } else {\n                this.transferStage(this.currentSceneIdx);\n            }\n        });\n        this.transition.node.on('transitionEnd', () => this.transitionPromise(''));\n        this.transition.node.on('failTransitionDone', () => {\n            this.player.resumeFromFail();\n            this.camera.reset();\n        });\n        this.boss.on('dead', () => {\n            this.player.node.emit('win');\n            this.transition.showGameResult(true);\n        });\n        this.player.node.on('dead', () => {\n            this.transition.showGameResult(false);\n        });\n        this.player.node.on('transfer', () => {\n            this.transferStage(this.currentSceneIdx + 1);\n        });\n        this.player.node.on('failed', () => {\n            this.transition.clockSceneFailTransition();\n        });\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event: cc.Event.EventKeyboard) => {\n            if (event.keyCode === cc.macro.KEY.tab && this.sceneNodes.length > this.currentSceneIdx + 1) {\n                this.player.status = false;\n                this.transferStage(this.currentSceneIdx + 1);\n            }\n        });\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event: cc.Event.EventKeyboard) => {\n            if (event.keyCode === cc.macro.KEY.o) {\n                this.player.status = false;\n                this.transferStage(this.currentSceneIdx);\n            }\n        });\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event: cc.Event.EventKeyboard) => {\n            if (event.keyCode === cc.macro.KEY.i) {\n                this.player.status = false;\n                this.transferStage(0);\n            }\n        });\n    }\n\n    start() {\n        this.mainMenu.node.active = true;\n        cc.audioEngine.playMusic(this.bgmMainMenu, true);\n        this.sceneNodes.forEach((scene, idx) => {\n            if (idx !== 0) {\n                scene.active = false;\n            }\n        });\n    }\n\n    private async transferStage(idx: number, isBackToMainMenu: boolean = false) {\n        const currentMusicVolume: number = cc.audioEngine.getMusicVolume();\n        const currentEffectVolume: number = cc.audioEngine.getEffectsVolume();\n        cc.audioEngine.stopMusic();\n        console.log('transion mute');\n        this.transition.openTransitionferStage();\n        await new Promise((resolve) => (this.transitionPromise = resolve));\n        this.currentScene.reset();\n        if (idx !== this.currentSceneIdx) {\n            this.camera.isUpdate = false;\n            this.currentScene.node.active = false;\n            this.currentScene = this.sceneNodes[idx].getComponent(SceneManager);\n            this.currentScene.node.active = true;\n            this.currentSceneIdx = idx;\n        }\n        this.player.reset(idx);\n        this.camera.reset();\n        this.narrator.reset();\n        if (this.currentSceneIdx >= this.sceneNodes.length - 2) {\n            this.camera.finalSceneSetUp();\n        } else {\n            this.camera.normalSceneSetUp();\n        }\n        this.transition.closeTransitionStage();\n        if (this.currentSceneIdx === this.sceneNodes.length - 1) {\n            cc.audioEngine.playMusic(this.bgmBoss, true);\n        } else if (isBackToMainMenu) {\n            cc.audioEngine.playMusic(this.bgmMainMenu, true);\n        } else if (this.currentSceneIdx <= 2) {\n            cc.audioEngine.playMusic(this.bgmCave, true);\n        } else {\n            cc.audioEngine.playMusic(this.bgmCastle, true);\n        }\n        if (this.currentSceneIdx === 2) {\n            this.player.status = false;\n            this.camera.isUpdate = false;\n            await this.camera.sceneThreeCameraMovement();\n            this.player.status = true;\n            this.camera.isUpdate = true;\n        } else if (this.currentSceneIdx === 3) {\n            this.player.status = false;\n            this.camera.isUpdate = false;\n            await this.camera.sceneFourCameraMovement();\n            this.player.status = true;\n            this.narrator.enableClockSceneMessage();\n            this.camera.isUpdate = true;\n        }\n    }\n}\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GateMechanism extends TimeEffect {\r\n\r\n\r\n    private gateAnimation: cc.Animation = null;\r\n    private boxColliderUp: cc.PhysicsBoxCollider = null;\r\n    private boxColliderDown: cc.PhysicsBoxCollider = null;\r\n    private gateStatus: \"opened\" | \"closed\" | \"default\" = \"default\";\r\n    private forerUsedSkill: \"accelerate\" | \"rollback\" | \"none\" = \"none\";\r\n\r\n    @property(cc.Boolean)\r\n    initialOpened: boolean = false;\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    public buttonFirstTriggered = false;\r\n\r\n    private isOpened: boolean = false;\r\n    private initialized: boolean = false;\r\n    private upClosedOffset: cc.Vec2 = cc.v2(0, 45.7);\r\n    private upClosedSize: cc.Size = cc.size(61.4, 131.6);\r\n    private upOpenedOffset: cc.Vec2 = cc.v2(0, 105.7);\r\n    private upOpenedSize: cc.Size = cc.size(61.4, 11.7);\r\n    private downClosedOffset: cc.Vec2 = cc.v2(0, -46.1);\r\n    private downClosedSize: cc.Size = cc.size(61.4, 113.2);\r\n    private downOpenedOffset: cc.Vec2 = cc.v2(0, -101.9);\r\n    private downOpenedSize: cc.Size = cc.size(61.4, 1.7);\r\n    onLoad() {\r\n        this.status = \"normal\";\r\n        this.gateAnimation = this.node.getComponent(cc.Animation);\r\n\r\n        this.boxColliderUp = this.node.getChildByName(\"boxColliderUp\").getComponent(cc.PhysicsBoxCollider);\r\n        this.boxColliderDown = this.node.getChildByName(\"boxColliderDown\").getComponent(cc.PhysicsBoxCollider);\r\n\r\n        if (this.initialOpened) {\r\n            this.open();\r\n        } else {\r\n            this.close();\r\n        }\r\n\r\n        this.gateAnimation.on('play', () => {\r\n            this.status = 'transforming';\r\n        });\r\n        this.gateAnimation.on('finished', () => {\r\n            if (this.initialized)\r\n                this.gateStatus = this.gateAnimation.currentClip.name === 'open' ? 'opened' : 'closed';\r\n            else {\r\n                this.initialized = true;\r\n            }\r\n            this.status = \"normal\";\r\n\r\n        });\r\n    }\r\n\r\n\r\n    public buttonTrigger() {\r\n        //console.log(this.isOpened);\r\n        if (this.buttonFirstTriggered === false)\r\n            this.buttonFirstTriggered = true;\r\n        if (this.isOpened) {\r\n            this.close();\r\n        } else {\r\n            this.open();\r\n            cc.audioEngine.playEffect(this.sound,false);\r\n        }\r\n    }\r\n\r\n    private open() {\r\n         \r\n        this.gateAnimation.play(\"open\");\r\n        cc.tween(this.boxColliderUp)\r\n            .to(0.8, { offset: this.upOpenedOffset, size: this.upOpenedSize })\r\n            .call(() => { this.boxColliderUp.apply(); })\r\n            .start()\r\n        cc.tween(this.boxColliderDown)\r\n            .to(0.8, { offset: this.downOpenedOffset, size: this.downOpenedSize })\r\n            .call(() => { this.boxColliderDown.apply(); })\r\n            .start()\r\n\r\n        this.isOpened = true;\r\n    }\r\n\r\n    private close() {\r\n        \r\n        this.gateAnimation.play(\"close\");\r\n        cc.tween(this.boxColliderUp)\r\n            .to(0.8, { offset: this.upClosedOffset, size: this.upClosedSize })\r\n            .call(() => { this.boxColliderUp.apply(); })\r\n            .start()\r\n        cc.tween(this.boxColliderDown)\r\n            .to(0.8, { offset: this.downClosedOffset, size: this.downClosedSize })\r\n            .call(() => { this.boxColliderDown.apply(); })\r\n            .start()\r\n\r\n        this.isOpened = false;\r\n    }\r\n\r\n    public rollback() {\r\n        if (this.gateStatus !== 'default') {\r\n            if (this.forerUsedSkill === 'accelerate' || this.forerUsedSkill === 'none') {\r\n                if (this.gateStatus === 'closed') {\r\n                    cc.audioEngine.playEffect(this.sound,false);\r\n                    this.open();\r\n                    this.forerUsedSkill = 'rollback';\r\n                } else if (this.gateStatus === 'opened') {\r\n                    this.close();\r\n                    this.forerUsedSkill = 'rollback';\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public accelerate() {\r\n        if (this.gateStatus !== 'default') {\r\n            if (this.forerUsedSkill === 'rollback') {\r\n                if (this.gateStatus === 'closed') {\r\n                    cc.audioEngine.playEffect(this.sound,false);\r\n                    this.open();\r\n                    this.forerUsedSkill = 'accelerate';\r\n                } else if (this.gateStatus === 'opened') {\r\n                    this.close();\r\n                    this.forerUsedSkill = 'accelerate';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public slowdown() { }\r\n\r\n    public reset() {\r\n        this.buttonFirstTriggered = false;\r\n        this.status = \"normal\";\r\n        this.forerUsedSkill = \"none\";\r\n        this.gateStatus = \"default\";\r\n        if (this.initialOpened) {\r\n            this.open();\r\n        } else {\r\n            this.close();\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport TimeEffect from '../TimeEffect';\nimport RigidBodyFollowParentNode from './RigidBodyFollowParentNode';\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class JaggedMechanism extends TimeEffect {\n\n    @property(cc.Node)\n    private player: cc.Node = null;\n\n    @property(cc.Prefab)\n    private jaggedParticleSystem: cc.Prefab = null;\n\n    @property\n    private moveSpeed: number = 0;\n\n    private currentTween: cc.Tween = null;\n    private originalPos: cc.Vec2 = null;\n    private lastAttackPos: cc.Vec2 = null;\n    private attackMoveTime: number = 0;\n    private returnMoveTime: number = 0;\n    private returning: boolean = false;\n    private rollbacking: boolean = false;\n    private preparing: boolean = false;\n    private timeEffectFromDR: boolean = false; //從指向石使用技能\n    private isIdle: boolean = true;\n\n    public skillCaseFromDR(status: boolean) {\n        this.timeEffectFromDR = status;\n    }\n\n    onLoad() {\n        this.status = 'normal';\n        this.originalPos = this.node.getPosition();\n    }\n\n    public preAttack(offset: number, delayTime: number) {\n\n        this.preparing = true;\n        this.status = 'normal';\n\n        let newParticleSystem = cc.instantiate(this.jaggedParticleSystem);\n        newParticleSystem.getComponent(cc.ParticleSystem).life = 0.5 + delayTime;\n        newParticleSystem.setPosition(0, 0);\n        newParticleSystem.scale = this.node.scale;\n        this.node.addChild(newParticleSystem);\n\n\n        this.currentTween = cc\n        .tween(this.node.children[0])\n        .by(0.5 + delayTime, {angle: 720 * (1 + delayTime)}, { easing: 'sineIn'})\n        .call(() => {this.startAttack(offset)})\n        .start()\n    }\n\n    private startAttack(offset: number) {\n\n        if(this.currentTween !== null) {\n            this.currentTween.stop();\n            this.unscheduleAllCallbacks();\n        }\n\n        const jaggedWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        const distanceX = this.player.x - this.player.parent.convertToNodeSpaceAR(jaggedWorldPos).x;\n        const distanceY = this.player.y - this.player.parent.convertToNodeSpaceAR(jaggedWorldPos).y;\n\n        this.preparing = false;\n        this.isIdle = false;\n        this.attackMoveTime = Math.sqrt(distanceX*distanceX + distanceY*distanceY) / this.moveSpeed;\n\n        let timeOffset = 0;\n\n        switch (this.status) {\n            case 'normal':\n                timeOffset = 1;\n                break;\n            case 'speedup':\n                timeOffset = 0.3;\n                break;\n            case 'slowdown':\n                timeOffset = 3;\n                break;\n            default:\n                break;\n        }\n\n        this.currentTween = cc\n            .tween(this.node)\n            .parallel(cc.tween().to(this.attackMoveTime*timeOffset, { x: this.player.x + offset }), \n            cc.tween().to(this.attackMoveTime*timeOffset, { y: this.player.y }))\n            .call(() => {this.schedule(this.returnToOriginalPos, 0.2, 0);})\n            .start();\n        (this.currentTween as any)._finalAction._speedMethod = true;\n    }\n\n    private returnToOriginalPos() {\n        this.returning = true;\n        this.lastAttackPos = this.node.getPosition();\n        const distanceX = this.lastAttackPos.x - this.originalPos.x;\n        const distanceY = this.lastAttackPos.y - this.originalPos.y;\n\n        this.returnMoveTime = Math.sqrt(distanceX*distanceX + distanceY*distanceY) / this.moveSpeed;\n\n        let timeOffset = 0;\n\n        switch (this.status) {\n            case 'normal':\n                timeOffset = 1;\n                break;\n            case 'speedup':\n                timeOffset = 0.3;\n                break;\n            case 'slowdown':\n                timeOffset = 3;\n                break;\n            default:\n                break;\n        }\n        \n        this.currentTween = cc\n            .tween(this.node)\n            .parallel(cc.tween().to(this.returnMoveTime*timeOffset, { x: this.originalPos.x }), \n            cc.tween().to(this.returnMoveTime*timeOffset, { y: this.originalPos.y }))\n            .call(() => {this.endAttack();})\n            .start();\n            (this.currentTween as any)._finalAction._speedMethod = true;\n    }\n\n    private endAttack() {\n        this.status = 'normal';\n        this.isIdle = true;\n        this.returning = false;\n        this.rollbacking = false;\n        this.node.children[0].group = 'MonsterDamage';\n        this.node.children[0].getComponent(cc.PhysicsBoxCollider).apply();\n    }\n\n    public accelerate() {\n        if(!this.isIdle && this.timeEffectFromDR) {\n            return;\n        }\n        this.changeMovement(false);\n    }\n\n    public slowdown() {\n        if(!this.isIdle && this.timeEffectFromDR) {\n            return;\n        }\n        this.changeMovement(true);\n    }\n\n    public rollback() {\n\n        if(this.preparing) {\n            return;\n        }\n\n        //攻擊過且已回到原本位置後被倒轉\n        if (this.isIdle && this.lastAttackPos !== null) {\n            this.node.children[0].group = 'Damage';\n            this.node.children[0].getComponent(cc.PhysicsBoxCollider).apply();\n            this.isIdle = false;\n            this.rollbacking = true;\n\n            const distanceX = this.lastAttackPos.x - this.originalPos.x;\n            const distanceY = this.lastAttackPos.y - this.originalPos.y;\n\n            this.attackMoveTime = Math.sqrt(distanceX*distanceX + distanceY*distanceY) / this.moveSpeed;\n\n            this.currentTween = cc\n            .tween(this.node)\n            .parallel(cc.tween().to(this.attackMoveTime, { x: this.lastAttackPos.x }), \n            cc.tween().to(this.attackMoveTime, { y: this.lastAttackPos.y }))\n            .call(() => {this.schedule(this.returnToOriginalPos, 0.2, 0);})\n            .start();\n            (this.currentTween as any)._finalAction._speedMethod = true;\n        }else if(!this.timeEffectFromDR && !this.rollbacking) {\n            this.node.children[0].group = 'Damage';\n            this.node.children[0].getComponent(cc.PhysicsBoxCollider).apply();\n            if(this.currentTween !== null) {\n                this.currentTween.stop();\n            }\n            this.returnToOriginalPos();\n\n        }\n    }\n\n    private changeMovement(slowdown: boolean, reset: boolean = false) {\n        const time = this.returning ? this.returnMoveTime : this.attackMoveTime;\n        switch (this.status) {\n            case 'normal':\n                (this.currentTween as any)._finalAction._speed = slowdown ? time / 3 : time * 3;\n                this.status = slowdown ? 'slowdown' : 'speedup';\n                break;\n            case 'speedup':\n                (this.currentTween as any)._finalAction._speed = slowdown ? time : time * 3;\n                this.status = slowdown ? 'normal' : 'speedup';\n                break;\n            case 'slowdown':\n                (this.currentTween as any)._finalAction._speed = slowdown ? time / 3 : time;\n                this.status = slowdown ? 'slowdown' : 'normal';\n                break;\n            default:\n                break;\n        }\n        if (reset) {\n            (this.currentTween as any)._finalAction._speed = time;\n            this.status = 'normal';\n        }\n    }\n\n    public reset() {\n        this.unscheduleAllCallbacks();\n        this.isIdle = true;\n        this.rollbacking = false;\n        this.returning = false;\n        this.lastAttackPos = null;\n        if(this.currentTween !== null) {\n            this.currentTween.stop();\n        }\n        this.node.children[0].group = 'MonsterDamage';\n        this.node.children[0].getComponent(cc.PhysicsBoxCollider).apply();\n        this.node.setPosition(this.originalPos);\n    }\n\n}\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LRmoveMechanism extends cc.Component {\r\n\r\n    private animationState: cc.AnimationState = null;\r\n    \r\n    onLoad() {\r\n        this.node.getComponent(cc.Animation).play('rockMoveRight');\r\n        this.node.getComponent(cc.Animation).on('finished', this.elevatorControl, this);\r\n    }\r\n\r\n    private elevatorControl() {\r\n        if(this.node.getComponent(cc.Animation).currentClip?.name === 'rockMoveRight') {\r\n            this.animationState = this.node.getComponent(cc.Animation).play('rockMoveStayR');\r\n            this.node.getComponent(cc.Animation).play('rockMoveStayR');\r\n        }else if(this.node.getComponent(cc.Animation).currentClip?.name === 'rockMoveStayR') {\r\n            this.animationState = this.node.getComponent(cc.Animation).play('rockMoveLeft');\r\n            this.node.getComponent(cc.Animation).play('rockMoveLeft');\r\n        }else if(this.node.getComponent(cc.Animation).currentClip?.name === 'rockMoveLeft') {\r\n            this.animationState = this.node.getComponent(cc.Animation).play('rockMoveStayL');\r\n            this.node.getComponent(cc.Animation).play('rockMoveStayL');\r\n        }else if(this.node.getComponent(cc.Animation).currentClip?.name === 'rockMoveStayL'){\r\n            this.animationState = this.node.getComponent(cc.Animation).play('rockMoveRight');\r\n            this.node.getComponent(cc.Animation).play('rockMoveRight');\r\n        }\r\n    }\r\n\r\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        if(other.node.name === \"EnergyRockSkillArea\") {\r\n            this.animationState.speed = 0.25;\r\n        }\r\n    }\r\n\r\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\r\n        if(other.node.name === \"EnergyRockSkillArea\") {\r\n            this.animationState.speed = 1;\r\n        }\r\n    }\r\n\r\n\r\n    // update (dt) {}\r\n}\r\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LoadingController extends cc.Component {\n    @property(cc.ProgressBar)\n    private progressBar: cc.ProgressBar = null;\n\n    @property(cc.Label)\n    private progressStatus: cc.Label = null;\n\n    start() {\n        cc.director.preloadScene('Game', this.onProgress.bind(this), this.onLoaded.bind(this));\n    }\n\n    private onProgress(completeCount: number, totalCount: number) {\n        this.progressBar.progress = completeCount / totalCount;\n        this.progressStatus.string = `Loading ${((completeCount / totalCount) * 100).toFixed(0)}%`;\n    }\n\n    private onLoaded(err: Error) {\n        if (err) {\n            console.log(err.message);\n        } else {\n            this.progressBar.progress = 1;\n            this.progressStatus.string = 'Loading 100%';\n            cc.director.loadScene('Game');\n        }\n    }\n}\n","import SettingPage from './SettingPage';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MainMenuController extends cc.Component {\n    @property(cc.Button)\n    private startBtn: cc.Button = null;\n\n    @property(cc.Button)\n    private settingBtn: cc.Button = null;\n\n    @property(SettingPage)\n    private settingPage: SettingPage = null;\n\n    @property(cc.Button)\n    private helpBtn: cc.Button = null;\n\n    @property(cc.Node)\n    private helpPage: cc.Node = null;\n\n    @property(cc.Node)\n    private closeHelpPageBtn: cc.Node = null;\n\n    @property(cc.Button)\n    private exitBtn: cc.Button = null;\n\n    @property(cc.AudioClip)\n    private buttonEffect: cc.AudioClip = null;\n\n    onLoad() {\n        this.startBtn.node.on(cc.Node.EventType.TOUCH_END, () => {\n            this.node.active = false;\n            this.node.emit('enterFirstScene');\n            cc.audioEngine.playEffect(this.buttonEffect, false);\n        });\n        this.exitBtn.node.on(cc.Node.EventType.TOUCH_END, () => {\n            cc.audioEngine.playEffect(this.buttonEffect, false);\n            cc.game.end();\n        });\n        this.settingBtn.node.on(cc.Node.EventType.TOUCH_END, () => {\n            this.settingPage.open();\n            cc.audioEngine.playEffect(this.buttonEffect, false);\n        });\n        this.helpBtn.node.on(cc.Node.EventType.TOUCH_END, () => {\n            this.helpPage.active = true;\n            cc.audioEngine.playEffect(this.buttonEffect, false);\n        });\n        this.closeHelpPageBtn.on(cc.Node.EventType.TOUCH_END, () => {\n            this.helpPage.active = false;\n            cc.audioEngine.playEffect(this.buttonEffect, false);\n        });\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MeleeAttack extends cc.Component {\n\n    private endAttack() {\n        this.node.destroy();\n    }\n\n    onLoad() {\n        this.schedule(this.endAttack,0.3,0);\n    }\n}\n","import MeleeAttack from './MeleeAttack';\nimport BulletDamage from './BulletDamage';\nimport PlayerManager from '../Player/PlayerManager';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MeleeMonster extends cc.Component {\n    @property(cc.Animation)\n    private monsterAnimation: cc.Animation = null;\n\n    @property(cc.Prefab)\n    private monsterDeathAnimation: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    private damageArea: cc.Prefab = null;\n\n    @property(cc.AudioClip)\n    private attackEffect: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private deathEffect: cc.AudioClip = null;\n\n    @property\n    private moveSpeed: number = 0;\n\n    @property\n    private freezeTime = 0;\n\n    private _moveDirection: boolean = true; // true: left, false: right\n    private onTheGround: boolean = false;\n    private playerFounded: boolean = false;\n    private startAttack: boolean = false;\n    private reachEdge: boolean = false;\n    private player: cc.Node = null;\n\n    update(dt: number) {\n        this.reachEdgeCheck();\n        this.onTheGroundCheck();\n        if (this.startAttack && this.onTheGround) {\n            this.playAttackAnimation();\n            this.schedule(this.playAttackAnimation, this.freezeTime, cc.macro.REPEAT_FOREVER, 0);\n        } else {\n            this.unschedule(this.playAttackAnimation);\n            if (this.monsterAnimation.currentClip?.name !== 'monsterAttack' && this.onTheGround) {\n                // 追蹤模式 距離保持 250，碰到邊界停下來\n                if (this.playerFounded) {\n                    const worldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n                    const distance: number = this.player.x - this.player.parent.convertToNodeSpaceAR(worldPos).x;\n                    const direction: boolean = distance < 0; // true: player在怪物右邊 false: player在怪物右邊\n                    this.moveDirection = direction;\n                    if (!this.reachEdge) {\n                        this.node.x += this.moveSpeed * dt * (direction ? -1 : 1);\n                        this.playRunAnimation();\n                    } else {\n                        this.playIdleAnimation();\n                    }\n                } else {\n                    // 普通模式下，碰到邊界後往反方向走\n                    if (this.reachEdge) {\n                        this.moveDirection = !this._moveDirection;\n                        this.reachEdge = false;\n                    }\n                    this.node.x += this.moveSpeed * dt * (this._moveDirection ? -1 : 1);\n                    this.playWalkAnimation();\n                }\n            }\n            if (!this.onTheGround) {\n                this.playIdleAnimation();\n            }\n        }\n    }\n\n    private set moveDirection(isLeft: boolean) {\n        if (this._moveDirection !== isLeft) {\n            this._moveDirection = isLeft;\n            this.node.scaleX = this._moveDirection ? -0.7 : 0.7;\n        }\n    }\n\n    onLoad() {\n        this.monsterAnimation.on('finished', this.playIdleAnimation, this);\n    }\n\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\n        // 偵測區接觸到玩家後，開啟追蹤模式以及開始攻擊\n        if (self.tag === 0 && other.node.name === 'Player') {\n            this.playerFounded = true;\n            this.player = other.node;\n        } else if (self.tag === 1) {\n            if (other.node.name === 'Deadline') {\n                // 怪物掉落\n                this.node.destroy();\n            }\n        } else if (self.tag === 2 && other.node.name === 'Player') {\n            this.startAttack = true;\n        }\n    }\n\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\n        // 碰撞區與玩家結束接觸後，關閉追蹤模式及停止攻擊\n        if (self.tag === 0 && other.node.name === 'Player') {\n            this.playerFounded = false;\n        } else if (self.tag === 2 && other.node.name === 'Player') {\n            this.startAttack = false;\n        }\n    }\n\n    public onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\n        if (self.tag === 0 && other.node.group === 'Damage') {\n            this.playDeathAnimation();\n            this.node.destroy();\n        }\n    }\n\n    private reachEdgeCheck() {\n        let offset = this._moveDirection ? -55 : 55;\n        offset = offset * Math.abs(this.node.scaleX);\n\n        const temp: cc.Vec3 = this.node.parent.convertToWorldSpaceAR(this.node.position);\n        const edgeCheckP1: cc.Vec2 = cc.v2(temp.x + offset, temp.y);\n        const edgeCheckP2: cc.Vec2 = cc.v2(temp.x + offset, temp.y - 110 * Math.abs(this.node.scaleX));\n\n        const wallCheckTopP1: cc.Vec2 = cc.v2(temp.x, temp.y + 10 * Math.abs(this.node.scaleX));\n        const wallCheckTopP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y + 10 * Math.abs(this.node.scaleX));\n        const wallCheckMediumP1: cc.Vec2 = cc.v2(temp.x, temp.y - 40 * Math.abs(this.node.scaleX));\n        const wallCheckMediumP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y - 40 * Math.abs(this.node.scaleX));\n        const wallCheckBottomP1: cc.Vec2 = cc.v2(temp.x, temp.y - 85 * Math.abs(this.node.scaleX));\n        const wallCheckBottomP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y - 85 * Math.abs(this.node.scaleX));\n\n        const edgeRayResults = cc.director.getPhysicsManager().rayCast(edgeCheckP1, edgeCheckP2, cc.RayCastType.All);\n        const wallTopRayResults = cc.director.getPhysicsManager().rayCast(wallCheckTopP1, wallCheckTopP2, cc.RayCastType.All);\n        const wallMediumRayResults = cc.director.getPhysicsManager().rayCast(wallCheckMediumP1, wallCheckMediumP2, cc.RayCastType.All);\n        const wallBottomRayResults = cc.director.getPhysicsManager().rayCast(wallCheckBottomP1, wallCheckBottomP2, cc.RayCastType.All);\n\n        if (edgeRayResults.length === 0) {\n            this.reachEdge = true;\n        } else {\n            for (let i = 0; i < edgeRayResults.length; i++) {\n                let result: cc.PhysicsRayCastResult = edgeRayResults[i];\n                let collider: cc.PhysicsCollider = result.collider;\n                if (collider.node.group === 'default') {\n                    this.reachEdge = false;\n                    break;\n                }\n                if (i === edgeRayResults.length - 1) {\n                    this.reachEdge = true;\n                }\n            }\n        }\n        if (!this.reachEdge && this.onTheGround) {\n            for (let i = 0; i < wallTopRayResults.length; i++) {\n                let result: cc.PhysicsRayCastResult = wallTopRayResults[i];\n                let collider: cc.PhysicsCollider = result.collider;\n                if (collider.node.group === 'default') {\n                    this.reachEdge = true;\n                    break;\n                }\n            }\n            if (!this.reachEdge) {\n                for (let i = 0; i < wallMediumRayResults.length; i++) {\n                    let result: cc.PhysicsRayCastResult = wallMediumRayResults[i];\n                    let collider: cc.PhysicsCollider = result.collider;\n                    if (collider.node.group === 'default') {\n                        this.reachEdge = true;\n                        break;\n                    }\n                }\n            }\n            if (!this.reachEdge) {\n                for (let i = 0; i < wallBottomRayResults.length; i++) {\n                    let result: cc.PhysicsRayCastResult = wallBottomRayResults[i];\n                    let collider: cc.PhysicsCollider = result.collider;\n                    if (collider.node.group === 'default') {\n                        this.reachEdge = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private onTheGroundCheck() {\n        const temp: cc.Vec3 = this.node.parent.convertToWorldSpaceAR(this.node.position);\n        const leftP1 = cc.v2(temp.x - 35 * Math.abs(this.node.scaleX), temp.y);\n        const leftP2 = cc.v2(temp.x - 35 * Math.abs(this.node.scaleX), temp.y - 110 * Math.abs(this.node.scaleX));\n        const rightP1 = cc.v2(temp.x + 35 * Math.abs(this.node.scaleX), temp.y);\n        const rightP2 = cc.v2(temp.x + 35 * Math.abs(this.node.scaleX), temp.y - 110 * Math.abs(this.node.scaleX));\n        const rayResultsLeft = cc.director.getPhysicsManager().rayCast(leftP1, leftP2, cc.RayCastType.All);\n        const rayResultsRight = cc.director.getPhysicsManager().rayCast(rightP1, rightP2, cc.RayCastType.All);\n\n        if (rayResultsLeft.length === 0 && rayResultsRight.length === 0) {\n            this.onTheGround = false;\n        } else {\n            for (let i = 0; i < rayResultsLeft.length; i++) {\n                let result: cc.PhysicsRayCastResult = rayResultsLeft[i];\n                let collider: cc.PhysicsCollider = result.collider;\n                if (collider.node.group === 'default') {\n                    this.onTheGround = true;\n                    break;\n                }\n            }\n            if (this.onTheGround === false) {\n                for (let i = 0; i < rayResultsRight.length; i++) {\n                    let result: cc.PhysicsRayCastResult = rayResultsRight[i];\n                    let collider: cc.PhysicsCollider = result.collider;\n                    if (collider.node.group === 'default') {\n                        this.onTheGround = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private playIdleAnimation() {\n        if (this.monsterAnimation.currentClip?.name !== 'monsterIdle') {\n            this.monsterAnimation.play('monsterIdle');\n        }\n    }\n\n    private playWalkAnimation() {\n        if (this.monsterAnimation.currentClip?.name !== 'monsterWalk') {\n            this.monsterAnimation.play('monsterWalk');\n        }\n    }\n\n    private playRunAnimation() {\n        if (this.monsterAnimation.currentClip?.name !== 'monsterRun') {\n            this.monsterAnimation.play('monsterRun');\n        }\n    }\n\n    private playAttackAnimation() {\n        if (!this.player.getComponent(PlayerManager).status) {\n            this.unschedule(this.playAttackAnimation);\n            return;\n        }\n        if (this.monsterAnimation.currentClip?.name !== 'monsterAttack') {\n            this.monsterAnimation.play('monsterAttack');\n            this.schedule(this.generateDamageArea, 0.5, 0);\n        }\n    }\n\n    private playDeathAnimation() {\n        cc.audioEngine.playEffect(this.deathEffect, false);\n        let anim = cc.instantiate(this.monsterDeathAnimation);\n        anim.setPosition(this.node.getPosition());\n        anim.scaleX = this.node.scaleX;\n        this.node.parent.addChild(anim);\n        anim.getComponent(cc.Animation).play('monsterDeath');\n    }\n\n    private generateDamageArea() {\n        cc.audioEngine.playEffect(this.attackEffect, false);\n        let newArea = cc.instantiate(this.damageArea);\n        const offset = this._moveDirection ? -40 : 40;\n        newArea.setPosition(this.node.x + offset, this.node.y);\n        this.node.parent.addChild(newArea);\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MenuController extends cc.Component {\n    @property(cc.Button)\n    private helpBtn: cc.Button = null;\n\n    @property(cc.Node)\n    private volumeToggle: cc.Node = null;\n\n    @property(cc.Button)\n    private backBtn: cc.Button = null;\n\n    @property(cc.Node)\n    private helpPanel: cc.Node = null;\n\n    @property(cc.Node)\n    private closeBtn: cc.Node = null;\n\n    @property(cc.AudioClip)\n    private buttonEffect: cc.AudioClip = null;\n\n    private isOpen: boolean = false;\n\n    onLoad() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event: cc.Event.EventKeyboard) => {\n            if (event.keyCode === cc.macro.KEY.escape) {\n                cc.audioEngine.playEffect(this.buttonEffect, false);\n                if (this.isOpen) {\n                    this.isOpen = false;\n                    this.helpPanel.active = false;\n                    this.node.active = false;\n                    cc.director.resume();\n                } else {\n                    this.isOpen = true;\n                    this.node.active = true;\n                    if (cc.audioEngine.getMusicVolume() === 0) {\n                        this.volumeToggle.getComponent(cc.Toggle).isChecked = true;\n                    } else {\n                        this.volumeToggle.getComponent(cc.Toggle).isChecked = false;\n                    }\n                    cc.director.pause();\n                }\n            }\n        });\n        this.helpBtn.node.on(cc.Node.EventType.TOUCH_END, () => {\n            this.helpPanel.active = true;\n            cc.audioEngine.playEffect(this.buttonEffect, false);\n        });\n        this.closeBtn.on(cc.Node.EventType.TOUCH_END, () => {\n            this.helpPanel.active = false;\n            cc.audioEngine.playEffect(this.buttonEffect, false);\n        });\n        this.volumeToggle.on('toggle', () => {\n            if (cc.audioEngine.getMusicVolume() === 0) {\n                cc.audioEngine.setMusicVolume(0.5);\n                cc.audioEngine.setEffectsVolume(0.5);\n                cc.audioEngine.playEffect(this.buttonEffect, false);\n            } else {\n                console.log('menuController mute');\n                cc.audioEngine.setMusicVolume(0);\n                cc.audioEngine.setEffectsVolume(0);\n            }\n        });\n        this.backBtn.node.on(cc.Node.EventType.TOUCH_END, () => {\n            this.node.active = false;\n            this.helpPanel.active = false;\n            this.isOpen = false;\n            cc.director.resume();\n            this.node.emit('back');\n        });\n        this.node.active = false;\n        this.node.opacity = 255;\n    }\n}\n","import PlotPoint from './PlotPoint';\r\nimport BridgeMechanism from '../Scene/Mechanism/FirstScene/BridgeMechanism';\r\nimport VineMechanism from '../Scene/Mechanism/FirstScene/VineMechanism';\r\nimport UpDownRockMoveMechanism from '../Scene/Mechanism/FirstScene/UpDownMoveRockMechanism';\r\nimport Player from '../Player/PlayerManager';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\ntype StatusType = 'original' | 'transforming' | 'triggered' | 'normal' | 'speedup' | 'slowdown';\r\n@ccclass\r\nexport default class NarratorManaget extends cc.Component {\r\n    @property(cc.Label)\r\n    private text: cc.Label = null;\r\n\r\n    @property([PlotPoint])\r\n    private plotPoints: PlotPoint[] = [];\r\n\r\n    @property(BridgeMechanism)\r\n    private bridge: BridgeMechanism = null;\r\n\r\n    @property(VineMechanism)\r\n    private vine: VineMechanism = null;\r\n\r\n    @property(UpDownRockMoveMechanism)\r\n    private rock: UpDownRockMoveMechanism = null;\r\n\r\n    @property(cc.Node)\r\n    private energyRock: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private directionStone: cc.Node = null;\r\n\r\n    @property(Player)\r\n    private player: Player = null;\r\n\r\n    @property(cc.Node)\r\n    private mask: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private background: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private lightSection: cc.Node = null;\r\n\r\n    @property([cc.Vec2])\r\n    private lightSectionPositions: cc.Vec2[] = [];\r\n\r\n    @property([cc.Vec2])\r\n    private lightSectionSizes: cc.Vec2[] = [];\r\n\r\n    @property([cc.Vec2])\r\n    private maskPositoins: cc.Vec2[] = [];\r\n\r\n    @property\r\n    private initY: number = 0;\r\n\r\n    @property\r\n    private targetY: number = 0;\r\n\r\n    private firstRangedMonster: cc.Node = null;\r\n    private currentTween: cc.Tween = null;\r\n    private hasDisplayedHint: boolean[] = [false, false, false];\r\n\r\n    private readonly messageContents: string[] = [\r\n        '按下「A」 或「D」 鍵進行移動， 空白鍵跳躍。',\r\n        '前方的木橋已經斷裂了， 如果能夠讓斷橋回到完好無缺的時候...\\n按下「R」 鍵， 並在技能範圍內點選斷橋， 來施放時間倒轉。',\r\n        '噢! 不好了， 怪物出現了! 只能先撤退回去!',\r\n        '對了! 如果讓木橋再次斷裂， 就能使怪物墜落深淵!\\n按下「Q」 鍵， 並在技能範圍內點選木橋， 來施放時間加速。',\r\n        '藤蔓還沒完全生長， 太短了...\\n按下「Q」 鍵， 並在技能範圍內點選藤蔓， 來施放時間加速。',\r\n        '這樣就能夠攀爬了!\\n跳到藤蔓上並且按下「W」 或「S」 鍵攀爬。',\r\n        '這個石塊的移動速度未免也太快了! 要如何才能順利地跳上去?\\n按下「E」 鍵，並在技能範圍內點選移動的石塊， 來施放時間緩滯。',\r\n        '石頭上有「裂痕」， 看起來快要掉落了，\\n使用「時間加速」 讓石頭提前掉落吧!',\r\n        '附近似乎沒有能傷害怪物的物體， 只好利用怪物的攻擊反擊!',\r\n        '儲存石! 能夠「儲存」 時間能量，並「散發」 出來!',\r\n        '投射石! 能夠將時間能量「投射」 至遠方!',\r\n        '這個區域的機關似乎與時間有所關聯!',\r\n    ];\r\n\r\n    onLoad() {\r\n        this.plotPoints.forEach((point, idx) => {\r\n            point.node.on('trigger', () => {\r\n                this.onPlotPointTrigger(idx);\r\n            });\r\n            point.node.on('untrigger', () => {\r\n                this.onPlotPointUntrigger(idx);\r\n            });\r\n        });\r\n        this.bridge.node.on('status', (status: StatusType) => {\r\n            if (status === 'triggered') {\r\n                this.plotPoints[3].node.active = false;\r\n                this.plotPoints[2].node.active = false;\r\n            } else if (status === 'original') {\r\n                this.plotPoints[1].node.active = false;\r\n            }\r\n        });\r\n        this.vine.node.on('status', (status: StatusType) => {\r\n            if (status === 'triggered') {\r\n                this.plotPoints[4].node.active = false;\r\n                this.plotPoints[5].node.active = true;\r\n            } else if (status === 'original') {\r\n                this.plotPoints[4].node.active = true;\r\n                this.plotPoints[5].node.active = false;\r\n            }\r\n        });\r\n        this.rock.node.on('status', (status: StatusType) => {\r\n            this.plotPoints[6].node.active = status !== 'slowdown';\r\n        });\r\n        this.energyRock.on('status', (status: StatusType) => {\r\n            this.plotPoints[9].node.active = status !== 'slowdown';\r\n        });\r\n        this.directionStone.on('status', (status: StatusType) => {\r\n            this.plotPoints[10].node.active = status !== 'slowdown';\r\n        });\r\n        this.firstRangedMonster = cc.find('Canvas/GameStage/Scene2/Ranged Monster');\r\n        this.firstRangedMonster.on('dead', this.onRangedMonsterDead, this);\r\n        this.mask.on(cc.Node.EventType.TOUCH_END, () => {\r\n            this.close();\r\n        });\r\n    }\r\n\r\n    public reset() {\r\n        this.firstRangedMonster.off('dead', this.onRangedMonsterDead, this);\r\n        this.firstRangedMonster = cc.find('Canvas/GameStage/Scene2/Ranged Monster');\r\n        this.firstRangedMonster.on('dead', this.onRangedMonsterDead, this);\r\n        this.currentTween.stop();\r\n        this.background.y = this.initY;\r\n        this.plotPoints.forEach((point) => (point.node.active = true));\r\n        this.plotPoints[3].node.active = false;\r\n        this.plotPoints[11].node.active = false;\r\n        this.hasDisplayedHint[0] = false;\r\n        this.hasDisplayedHint[1] = false;\r\n        this.hasDisplayedHint[2] = false;\r\n    }\r\n\r\n    public enableClockSceneMessage() {\r\n        this.plotPoints[11].node.active = true;\r\n    }\r\n\r\n    private onRangedMonsterDead() {\r\n        this.plotPoints[8].node.active = false;\r\n    }\r\n\r\n    private onPlotPointTrigger(idx: number) {\r\n        this.text.string = this.messageContents[idx];\r\n        switch (idx) {\r\n            case 1:\r\n                this.pauseForHint(0);\r\n                break;\r\n            case 4:\r\n                this.pauseForHint(1);\r\n                break;\r\n            case 6:\r\n                this.pauseForHint(2);\r\n                break;\r\n            case 2:\r\n                this.plotPoints[3].node.active = true;\r\n                //this.pauseForHint(idx);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.currentTween?.stop();\r\n        this.currentTween = cc.tween(this.background).to(0.5, { y: this.targetY }, cc.easeBackOut()).start();\r\n    }\r\n\r\n    private onPlotPointUntrigger(idx: number) {\r\n        switch (idx) {\r\n            case 0:\r\n                this.plotPoints[0].node.active = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.currentTween?.stop();\r\n        this.currentTween = cc.tween(this.background).to(0.5, { y: this.initY }).start();\r\n    }\r\n\r\n    private pauseForHint(idx: number) {\r\n        if (!this.hasDisplayedHint[idx]) {\r\n            this.hasDisplayedHint[idx] = true;\r\n            this.lightSection.active = true;\r\n            this.player.onHintPause();\r\n            this.scheduleOnce(() => {\r\n                this.player.status = true;\r\n                this.lightSection.active = false;\r\n            }, 3);\r\n            this.lightSection.setPosition(this.lightSectionPositions[idx]);\r\n            this.lightSection.setContentSize(this.lightSectionSizes[idx].x, this.lightSectionSizes[idx].y);\r\n            this.mask.setPosition(this.maskPositoins[idx]);\r\n        }\r\n    }\r\n\r\n    private close() {\r\n        if (cc.director.isPaused) {\r\n            cc.director.resume();\r\n        }\r\n    }\r\n}\r\n","import TimeEffect from '../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NormalElevatorMechanism extends TimeEffect {\r\n    @property([cc.Node])\r\n    private chains: cc.Node[] = [];\r\n\r\n    @property(cc.Vec2)\r\n    private highPosition: cc.Vec2 = new cc.Vec2();\r\n\r\n    @property(cc.Vec2)\r\n    private lowPosition: cc.Vec2 = new cc.Vec2();\r\n\r\n    @property(cc.Node)\r\n    private testNode: cc.Node = null;\r\n\r\n    @property\r\n    private chainHighHeight: number = 0;\r\n\r\n    @property\r\n    private chainLowHeight: number = 0;\r\n\r\n    @property\r\n    private movingSecond: number = 0;\r\n\r\n    @property\r\n    private remainSecond: number = 0;\r\n\r\n    private chainOneTween: cc.Tween = null;\r\n    private chainTwoTween: cc.Tween = null;\r\n    private elevatorTween: cc.Tween = null;\r\n\r\n    private isMoving: boolean = false;\r\n\r\n    onLoad() {\r\n        // this.chains[0].zIndex = -1;\r\n        // this.chains[1].zIndex = -1;\r\n        this.testNode.on(cc.Node.EventType.TOUCH_END, () => this.elevatorTriggered());\r\n    }\r\n\r\n    public elevatorTriggered() {\r\n        if (this.isMoving) {\r\n            return;\r\n        }\r\n        this.reset();\r\n        this.isMoving = true;\r\n        this.elevatorTween = cc\r\n            .tween(this.node)\r\n            .delay(2)\r\n            .to(this.movingSecond, { y: this.highPosition.y })\r\n            .delay(this.remainSecond)\r\n            .to(this.movingSecond, { y: this.lowPosition.y })\r\n            .call(() => (this.isMoving = false))\r\n            .start();\r\n        this.chainOneTween = cc\r\n            .tween(this.chains[0])\r\n            .delay(2)\r\n            .to(this.movingSecond, { height: this.chainHighHeight })\r\n            .delay(this.remainSecond)\r\n            .to(this.movingSecond, { height: this.chainLowHeight })\r\n            .start();\r\n        this.chainTwoTween = cc\r\n            .tween(this.chains[1])\r\n            .delay(2)\r\n            .to(this.movingSecond, { height: this.chainHighHeight })\r\n            .delay(this.remainSecond)\r\n            .to(this.movingSecond, { height: this.chainLowHeight })\r\n            .start();\r\n    }\r\n\r\n    // 為了能讓 sceneManager call reset 所以要繼承 TimeEffect\r\n    public accelerate() {}\r\n    public slowdown() {}\r\n    public rollback() {}\r\n\r\n    public reset() {\r\n        this.chainOneTween?.stop();\r\n        this.chainTwoTween?.stop();\r\n        this.elevatorTween?.stop();\r\n        this.node.setPosition(this.lowPosition);\r\n        this.chains[0].height = this.chainLowHeight;\r\n        this.chains[1].height = this.chainLowHeight;\r\n        this.isMoving = false;\r\n    }\r\n}\r\n","import TimeEffect from '../TimeEffect';\r\nimport SkillCast from './SkillCast';\r\nimport AnimationEvent from './AnimationEvent';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlayerManager extends cc.Component {\r\n    @property(cc.Animation)\r\n    private playerAnimation: cc.Animation = null;\r\n\r\n    @property([cc.Vec2])\r\n    private playerPosition: cc.Vec2[] = [];\r\n\r\n    @property([cc.Boolean])\r\n    private playerDirection: boolean[] = [];\r\n\r\n    @property(cc.Node)\r\n    private skillRange: cc.Node = null;\r\n\r\n    @property(SkillCast)\r\n    private userPointer: SkillCast = null;\r\n\r\n    @property(cc.Node)\r\n    private heartGroup: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private feetRayPoint: cc.Node = null;\r\n\r\n    @property(cc.Prefab)\r\n    private triggerSkillParticle: cc.Prefab = null;\r\n\r\n    @property(cc.AudioClip)\r\n    private skillSuccess: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private skillfail: cc.AudioClip = null;\r\n    @property\r\n    private healthPoint: number = 5;\r\n\r\n    @property\r\n    private moveAccel: number = 0;\r\n\r\n    @property\r\n    private jumpFroce: number = 0;\r\n\r\n    @property\r\n    private invincibleTime: number = 0;\r\n\r\n    private effectsAnimation: cc.Animation = null;\r\n    private input = {};\r\n    private animationEvent: AnimationEvent = null;\r\n    private onTheGround: boolean = false;\r\n    private speed: cc.Vec2 = cc.v2(0, 0);\r\n    private currentUsingSkill: SkillSet = -1;\r\n    private isClimbing: boolean = false;\r\n    private isAlive: boolean = false;\r\n    private isInvincible: boolean = false;\r\n    private currentSceneIdx: number = null; // current scene idx\r\n    private climbPauseCount: number = 0;\r\n    public playerState: number = -1;\r\n\r\n    public get status() {\r\n        return this.isAlive;\r\n    }\r\n    public GetIsClimbing() {\r\n        return this.isClimbing;\r\n    }\r\n    public resetClimbCount() {\r\n        this.climbPauseCount = 0;\r\n    }\r\n    public set status(flag: boolean) {\r\n        this.isAlive = flag;\r\n    }\r\n\r\n    onLoad() {\r\n        //\r\n        this.effectsAnimation = this.node.getChildByName('SkillArea').getChildByName('Effects').getComponent(cc.Animation);\r\n        // 技能切換\r\n        this.animationEvent = this.node.getChildByName('Appearance').getComponent('AnimationEvent');\r\n        this.node.on('win', () => {\r\n            this.isAlive = false;\r\n            this.animationEvent.walkAudioPause();\r\n        });\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event: cc.Event.EventKeyboard) => {\r\n            if ((event.keyCode === cc.macro.KEY.q || event.keyCode === cc.macro.KEY.e || event.keyCode === cc.macro.KEY.r) && !this.input[event.keyCode]) {\r\n                this.toggleSkill(event.keyCode, true);\r\n            }\r\n            this.input[event.keyCode] = true;\r\n        });\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, (event: cc.Event.EventKeyboard) => {\r\n            this.input[event.keyCode] = false;\r\n            if (event.keyCode === cc.macro.KEY.q || event.keyCode === cc.macro.KEY.e || event.keyCode === cc.macro.KEY.r) {\r\n                this.toggleSkill(event.keyCode, false);\r\n            }\r\n        });\r\n\r\n        // debug用 重置角色位置狀態\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event: cc.Event.EventKeyboard) => {\r\n            this.input[event.keyCode] = true;\r\n            if (event.keyCode === cc.macro.KEY.z) {\r\n                this.reset();\r\n            }\r\n        });\r\n\r\n        // 玩家點擊到機關並且在技能範圍內\r\n        this.userPointer.node.on('skillHit', (target: cc.Collider) => {\r\n            console.log('skill casted');\r\n            const mechanism: TimeEffect = target.getComponent(TimeEffect);\r\n            const { none, accelerate, slowdown, rollback } = SkillSet;\r\n            if (this.currentUsingSkill !== none) {\r\n                if (mechanism.checkStatus(this.currentUsingSkill)) {\r\n                    const id: number = cc.audioEngine.playEffect(this.skillSuccess, false);\r\n                    cc.audioEngine.setVolume(id, 0.3);\r\n                    this.finiteState(StateSet.useSkill);\r\n                    this.triggleSkillSuccessParticle();\r\n                    switch (this.currentUsingSkill) {\r\n                        case accelerate:\r\n                            console.log(`Accelerate ${target.name}`);\r\n                            mechanism.accelerate();\r\n                            break;\r\n                        case slowdown:\r\n                            console.log(`Slowdown ${target.name}`);\r\n                            mechanism.slowdown();\r\n                            break;\r\n                        case rollback:\r\n                            console.log(`Rollback ${target.name}`);\r\n                            mechanism.rollback();\r\n                            break;\r\n                    }\r\n                } else {\r\n                    const id: number = cc.audioEngine.playEffect(this.skillfail, false);\r\n                    cc.audioEngine.setVolume(id, 0.3);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (!this.isAlive) {\r\n            this.node.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(0, 0);\r\n            return;\r\n        }\r\n        //碰地判斷\r\n        this.onTheGroundCheck();\r\n\r\n        if (this.onTheGround && !(this.playerState == StateSet.hurt || this.playerState == StateSet.die)) {\r\n            let lv = this.node.getComponent(cc.RigidBody).linearVelocity;\r\n            //左右移動\r\n            if (this.input[cc.macro.KEY.a]) {\r\n                this.speed.x = -1;\r\n                if (this.node.scaleX !== -0.5) {\r\n                    // 固定特效Scale\r\n                    this.effectsAnimation.node.scaleX = -this.effectsAnimation.node.scaleX;\r\n                    this.node.scaleX = -0.5;\r\n                }\r\n            } else if (this.input[cc.macro.KEY.d]) {\r\n                this.speed.x = 1;\r\n                if (this.node.scaleX !== 0.5) {\r\n                    // 固定特效Scale\r\n                    this.effectsAnimation.node.scaleX = -this.effectsAnimation.node.scaleX;\r\n                    this.node.scaleX = 0.5;\r\n                }\r\n            } else {\r\n                this.speed.x = 0;\r\n            }\r\n            if (this.speed.x !== 0) {\r\n                lv.x = this.speed.x * this.moveAccel;\r\n                this.finiteState(StateSet.run);\r\n            } else {\r\n                lv.x = 0;\r\n                //若在攀爬狀態即不進入idle動畫\r\n                this.animationEvent.walkAudioPause();\r\n                if (!this.isClimbing) {\r\n                    this.finiteState(StateSet.idle);\r\n                }\r\n            }\r\n            if (this.isClimbing) {\r\n                // 攀爬\r\n                if (this.input[cc.macro.KEY.w]) {\r\n                    lv.y = this.moveAccel;\r\n                    this.playerAnimation.resume('playerClimb');\r\n                } else if (this.input[cc.macro.KEY.s]) {\r\n                    lv.y = -this.moveAccel;\r\n                    this.playerAnimation.resume('playerClimb');\r\n                } else if (this.input[cc.macro.KEY.a]) {\r\n                    this.playerAnimation.resume('playerClimb');\r\n                } else if (this.input[cc.macro.KEY.d]) {\r\n                    this.playerAnimation.resume('playerClimb');\r\n                } else {\r\n                    lv.y = 0;\r\n                    if (this.climbPauseCount >= 5) {\r\n                        this.playerAnimation.pause('playerClimb');\r\n                    } else {\r\n                        this.climbPauseCount++;\r\n                    }\r\n                }\r\n            } else {\r\n                //跳躍\r\n                if (this.input[cc.macro.KEY.space]) {\r\n                    if (this.onTheGround) {\r\n                        this.animationEvent.walkAudioPause();\r\n                        lv.y = this.jumpFroce;\r\n                        this.finiteState(StateSet.jump);\r\n                    }\r\n                }\r\n            }\r\n            this.getComponent(cc.RigidBody).linearVelocity = lv;\r\n        }\r\n    }\r\n\r\n    public onHintPause() {\r\n        let lv = this.node.getComponent(cc.RigidBody).linearVelocity;\r\n        lv.x = 0;\r\n        this.animationEvent.walkAudioPause();\r\n        this.finiteState(StateSet.idle);\r\n        this.input = {};\r\n        this.isAlive = false;\r\n    }\r\n\r\n    public reset(idx?: number) {\r\n        if (idx !== undefined) {\r\n            this.currentSceneIdx = idx;\r\n        }\r\n        if (this.currentSceneIdx === null) {\r\n            this.currentSceneIdx = 0; // 如果沒有從主菜單進遊戲， currentSceneIdx 為 null，會導致錯誤\r\n        }\r\n\r\n        // status\r\n        this.healthPoint = 5;\r\n        this.updateHearts(this.healthPoint);\r\n\r\n        // position\r\n        this.node.setPosition(this.playerPosition[this.currentSceneIdx]);\r\n\r\n        // direction\r\n        this.node.scaleX = this.playerDirection[this.currentSceneIdx] ? -0.5 : 0.5;\r\n        // movement\r\n        // input\r\n        // skill range\r\n        this.resetPlayerState();\r\n\r\n        //pointer\r\n        this.userPointer.changeScene();\r\n    }\r\n\r\n    public resumeFromFail() {\r\n        // position\r\n        this.node.setPosition(this.playerPosition[this.currentSceneIdx]);\r\n\r\n        // direction\r\n        this.node.scaleX = this.playerDirection[this.currentSceneIdx] ? -0.5 : 0.5;\r\n        // movement\r\n        // input\r\n        // skill range\r\n        this.resetPlayerState();\r\n        this.isAlive = true;\r\n    }\r\n\r\n    //進入不可控制狀態即reset這些數值\r\n    private resetPlayerState() {\r\n        this.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(0, 0);\r\n\r\n        this.input = {};\r\n        this.playerState = StateSet.none;\r\n        this.finiteState(StateSet.idle);\r\n\r\n        this.skillRange.active = true;\r\n        this.currentUsingSkill = -1;\r\n        this.animationEvent.noneEffect();\r\n    }\r\n\r\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\r\n        // 受到傷害\r\n        if (self.tag === 0 && (other.node.group === 'Damage' || other.node.group === 'MonsterDamage') && !this.isInvincible) {\r\n            this.resetPlayerState();\r\n            if (other.node.name === 'rollingRock') {\r\n                //滾石即死\r\n                this.updateHearts(0);\r\n                return;\r\n            }\r\n            if (this.healthPoint > 1) {\r\n                this.finiteState(StateSet.hurt);\r\n                this.input = {};\r\n            }\r\n            this.updateHearts(--this.healthPoint);\r\n            this.beingInvincible();\r\n        }\r\n    }\r\n    private triggleSkillSuccessParticle() {\r\n        console.log('djfnsjknfkjgndsf');\r\n        let temp = cc.instantiate(this.triggerSkillParticle);\r\n        this.userPointer.node.getParent().addChild(temp);\r\n        temp.position = this.userPointer.node.position;\r\n    }\r\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        // 攀爬\r\n        if (other.node.name === 'VineBody' || other.node.name === 'SilkBody') {\r\n            // 避免觸發其他觸發器\r\n            this.climbPauseCount = 0; //給動畫一點時間再允許暫停\r\n            this.playerAnimation.play('playerClimb');\r\n            const rigidBody: cc.RigidBody = self.getComponent(cc.RigidBody);\r\n            this.onTheGround = true;\r\n            this.isClimbing = true;\r\n            rigidBody.type = cc.RigidBodyType.Kinematic;\r\n            rigidBody.linearVelocity = new cc.Vec2(0, 0);\r\n        }\r\n        // 角色死亡\r\n        if (other.node.name === 'Deadline') {\r\n            this.updateHearts(0);\r\n        } else if (other.node.name === 'FailLine') {\r\n            this.healthPoint -= 2;\r\n            if (this.healthPoint <= 0) {\r\n                this.updateHearts(0);\r\n            } else {\r\n                this.finiteState(StateSet.hurt);\r\n                this.updateHearts(this.healthPoint);\r\n                this.isAlive = false;\r\n                this.animationEvent.walkAudioPause();\r\n                this.node.emit('failed');\r\n            }\r\n        }\r\n        // 通關\r\n        else if (other.node.name === 'TransferPoint') {\r\n            if (this.isAlive) {\r\n                this.isAlive = false;\r\n                this.animationEvent.walkAudioPause();\r\n                this.node.emit('transfer');\r\n            }\r\n        }\r\n    }\r\n\r\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\r\n        // 結束攀爬\r\n        if (other.node.name === 'VineBody' || other.node.name === 'SilkBody') {\r\n            const rigidBody: cc.RigidBody = self.getComponent(cc.RigidBody);\r\n            rigidBody.type = cc.RigidBodyType.Dynamic;\r\n            this.onTheGround = false;\r\n            this.isClimbing = false;\r\n            this.playerAnimation.play('playerJump');\r\n        }\r\n    }\r\n\r\n    // show skill range\r\n    private toggleSkill(keyCode: number, isOpen: boolean) {\r\n        if (!this.isAlive) {\r\n            return;\r\n        }\r\n        const { none, accelerate, slowdown, rollback } = SkillSet;\r\n        let skillIndex: number = none;\r\n        if (isOpen) {\r\n            switch (keyCode) {\r\n                case cc.macro.KEY.q:\r\n                    if (this.currentUsingSkill === 0) {\r\n                        this.effectsAnimation.play('reverseAccel');\r\n                        this.currentUsingSkill = -1;\r\n                        break;\r\n                    }\r\n                    this.effectsAnimation.play('accelExpend');\r\n                    this.currentUsingSkill = 0;\r\n                    skillIndex = accelerate;\r\n                    break;\r\n                case cc.macro.KEY.e:\r\n                    if (this.currentUsingSkill === 1) {\r\n                        this.effectsAnimation.play('reverseSlow');\r\n                        this.currentUsingSkill = -1;\r\n                        break;\r\n                    }\r\n                    this.effectsAnimation.play('slowExpend');\r\n                    this.currentUsingSkill = 1;\r\n                    skillIndex = slowdown;\r\n                    break;\r\n                case cc.macro.KEY.r:\r\n                    if (this.currentUsingSkill === 2) {\r\n                        this.effectsAnimation.play('reverseRollBack');\r\n                        this.currentUsingSkill = -1;\r\n                        break;\r\n                    }\r\n                    this.effectsAnimation.play('rollBackExpend');\r\n                    this.currentUsingSkill = 2;\r\n                    skillIndex = rollback;\r\n                    break;\r\n            }\r\n        } else if (!isOpen) {\r\n            switch (keyCode) {\r\n                case cc.macro.KEY.q:\r\n                    if (this.currentUsingSkill === 0) {\r\n                        this.effectsAnimation.play('reverseAccel');\r\n                        this.currentUsingSkill = -1;\r\n                        skillIndex = none;\r\n                    }\r\n                    break;\r\n                case cc.macro.KEY.e:\r\n                    if (this.currentUsingSkill === 1) {\r\n                        this.effectsAnimation.play('reverseSlow');\r\n                        this.currentUsingSkill = -1;\r\n                        skillIndex = none;\r\n                    }\r\n                    break;\r\n                case cc.macro.KEY.r:\r\n                    if (this.currentUsingSkill === 2) {\r\n                        this.effectsAnimation.play('reverseRollBack');\r\n                        this.currentUsingSkill = -1;\r\n                        skillIndex = none;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // update health points and display it\r\n    private updateHearts(num: number) {\r\n        if (num === 5) {\r\n            this.isAlive = true;\r\n            this.heartGroup.children.forEach((node) => (node.getComponentInChildren(cc.Toggle).isChecked = true));\r\n        } else {\r\n            this.heartGroup.children.slice(num).forEach((node) => (node.getComponentInChildren(cc.Toggle).isChecked = false));\r\n            if (num === 0) {\r\n                this.finiteState(StateSet.die);\r\n                this.animationEvent.walkAudioPause();\r\n                this.node.emit('dead');\r\n                this.isAlive = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private beingInvincible() {\r\n        this.isInvincible = true;\r\n        this.scheduleOnce(() => (this.isInvincible = false), this.invincibleTime);\r\n    }\r\n\r\n    private onTheGroundCheck() {\r\n        const tempPoint: cc.Vec2 = this.feetRayPoint.convertToWorldSpaceAR(cc.v2(0, 0));\r\n        const leftP1 = cc.v2(tempPoint.x - 11, tempPoint.y);\r\n        const leftP2 = cc.v2(tempPoint.x - 11, tempPoint.y - 24);\r\n\r\n        const rightP1 = cc.v2(tempPoint.x + 11, tempPoint.y);\r\n        const rightP2 = cc.v2(tempPoint.x + 11, tempPoint.y - 24);\r\n\r\n        const leftRayResult = cc.director.getPhysicsManager().rayCast(leftP1, leftP2, cc.RayCastType.All);\r\n        const rightRayResult = cc.director.getPhysicsManager().rayCast(rightP1, rightP2, cc.RayCastType.All);\r\n\r\n        if (leftRayResult.length === 0 && rightRayResult.length === 0) {\r\n            this.onTheGround = false;\r\n        } else {\r\n            this.onTheGround = true;\r\n        }\r\n        //攀爬=碰地\r\n        if (this.isClimbing == true) this.onTheGround = true;\r\n    }\r\n\r\n    private finiteState(nextState: number) {\r\n        if (nextState == StateSet.die) {\r\n            this.playerState = StateSet.die;\r\n            this.playerAnimation.play('playerDeath');\r\n            return;\r\n        }\r\n        if (nextState == StateSet.hurt) {\r\n            this.playerState = StateSet.hurt;\r\n            this.playerAnimation.play('playerHurt');\r\n            return;\r\n        }\r\n        if (!this.isClimbing) {\r\n            if (nextState == StateSet.jump && !(this.playerState == StateSet.hurt || this.playerState == StateSet.die)) {\r\n                this.playerState = StateSet.jump;\r\n                this.playerAnimation.play('playerJump');\r\n                return;\r\n            }\r\n            if (nextState == StateSet.useSkill && !(this.playerState == StateSet.hurt || this.playerState == StateSet.die)) {\r\n                this.playerState = StateSet.useSkill;\r\n                this.playerAnimation.play('playerUseSkill');\r\n                return;\r\n            }\r\n            if (nextState == StateSet.run && (this.playerState == StateSet.none || this.playerState == StateSet.idle)) {\r\n                this.playerState = StateSet.run;\r\n                this.playerAnimation.play('playerRun');\r\n                return;\r\n            }\r\n            if (nextState == StateSet.idle && (this.playerState == StateSet.none || this.playerState == StateSet.run)) {\r\n                this.playerState = StateSet.idle;\r\n                this.playerAnimation.play('playerIdle');\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport enum SkillSet {\r\n    none = -1,\r\n    accelerate,\r\n    slowdown,\r\n    rollback,\r\n}\r\n\r\nexport enum StateSet {\r\n    none = -1,\r\n    idle,\r\n    run,\r\n    climbing,\r\n    jump,\r\n    useSkill,\r\n    hurt,\r\n    die,\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlotPoint extends cc.Component {\r\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        if (other.node.name === 'Player') {\r\n            this.node.emit('trigger');\r\n        }\r\n    }\r\n\r\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\r\n        if (other.node.name === 'Player') {\r\n            this.node.emit('untrigger');\r\n        }\r\n    }\r\n}\r\n","import Bullet from './Bullet';\nimport BulletDamage from './BulletDamage';\nimport PlayerManager from '../Player/PlayerManager';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class RangedMonster extends cc.Component {\n    @property(cc.Prefab)\n    private bullet: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    private monsterDeathAnimation: cc.Prefab = null;\n\n    @property(cc.Animation)\n    private monsterAnimation: cc.Animation = null;\n\n    @property(cc.AudioClip)\n    private shootEffect: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    private deathEffect: cc.AudioClip = null;\n\n    @property\n    private moveSpeed: number = 0;\n\n    @property\n    private attackDistance: number = 0;\n\n    private moveDirection: boolean = true; // true: left, false: right\n    private onTheGround: boolean = false;\n    private playerFounded: boolean = false;\n    private reachEdge: boolean = false;\n    private player: cc.Node = null; // 透過碰撞測試取得\n\n    update(dt: number) {\n        this.onTheGroundCheck();\n        if (this.monsterAnimation.currentClip?.name !== 'monsterShoot') {\n            if (this.onTheGround) {\n                this.reachEdgeCheck();\n                // 追蹤模式 距離保持 250，碰到邊界停下來\n                if (this.playerFounded) {\n                    const monsterWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n                    const distance: number = this.player.x - this.player.parent.convertToNodeSpaceAR(monsterWorldPos).x;\n                    const direction: boolean = distance < 0; // true: player在怪物右邊 false: player在怪物右邊\n                    this.moveDirection = direction;\n                    this.node.scaleX = this.moveDirection ? -0.7 : 0.7;\n                    if (!this.reachEdge) {\n                        if (Math.abs(distance) >= this.attackDistance) {\n                            this.node.x += this.moveSpeed * dt * (direction ? -1 : 1);\n                            this.playWalkAnimation();\n                        } else {\n                            this.playIdleAnimation();\n                        }\n                    } else {\n                        this.playIdleAnimation();\n                    }\n                } else {\n                    // 普通模式下，碰到邊界後往反方向走\n                    if (this.reachEdge) {\n                        this.moveDirection = !this.moveDirection;\n                        this.reachEdge = false;\n                        this.node.scaleX = this.moveDirection ? -0.7 : 0.7;\n                    }\n                    this.node.x += this.moveSpeed * dt * (this.moveDirection ? -1 : 1);\n                    this.playWalkAnimation();\n                }\n            } else {\n                this.playIdleAnimation();\n            }\n        }\n    }\n\n    onDestroy() {\n        this.node.emit('dead');\n    }\n\n    onLoad() {\n        this.monsterAnimation.on('finished', this.playIdleAnimation, this);\n    }\n\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\n        // 偵測區接觸到玩家後，開啟追蹤模式以及開始攻擊\n        if (self.tag === 0 && other.node.name === 'Player') {\n            this.playerFounded = true;\n            this.player = other.node;\n            this.schedule(this.playShootAnimation, 3, cc.macro.REPEAT_FOREVER, 1);\n        }\n        if (self.tag === 1) {\n            if (other.node.name === 'Deadline') {\n                // 怪物掉落\n                this.node.destroy();\n            }\n        }\n    }\n\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\n        // 碰撞區與玩家結束接觸後，關閉追蹤模式及停止攻擊\n        if (self.tag === 0 && other.node.name === 'Player') {\n            this.playerFounded = false;\n            this.unschedule(this.playShootAnimation);\n        }\n    }\n\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\n        if (self.tag === 0 && other.node.group === 'Damage') {\n            this.playDeathAnimation();\n            this.node.destroy();\n        }\n    }\n\n    private reachEdgeCheck() {\n        let offset = this.moveDirection ? -55 : 55;\n        offset = offset * Math.abs(this.node.scaleX);\n\n        const temp: cc.Vec3 = this.node.parent.convertToWorldSpaceAR(this.node.position);\n        const edgeCheckP1: cc.Vec2 = cc.v2(temp.x + offset, temp.y);\n        const edgeCheckP2: cc.Vec2 = cc.v2(temp.x + offset, temp.y - 110 * Math.abs(this.node.scaleX));\n        const wallCheckTopP1: cc.Vec2 = cc.v2(temp.x, temp.y + 10 * Math.abs(this.node.scaleX));\n        const wallCheckTopP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y + 10 * Math.abs(this.node.scaleX));\n        const wallCheckMediumP1: cc.Vec2 = cc.v2(temp.x, temp.y - 40 * Math.abs(this.node.scaleX));\n        const wallCheckMediumP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y - 40 * Math.abs(this.node.scaleX));\n        const wallCheckBottomP1: cc.Vec2 = cc.v2(temp.x, temp.y - 85 * Math.abs(this.node.scaleX));\n        const wallCheckBottomP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y - 85 * Math.abs(this.node.scaleX));\n\n        const edgeRayResults = cc.director.getPhysicsManager().rayCast(edgeCheckP1, edgeCheckP2, cc.RayCastType.All);\n        const wallTopRayResults = cc.director.getPhysicsManager().rayCast(wallCheckTopP1, wallCheckTopP2, cc.RayCastType.All);\n        const wallMediumRayResults = cc.director.getPhysicsManager().rayCast(wallCheckMediumP1, wallCheckMediumP2, cc.RayCastType.All);\n        const wallBottomRayResults = cc.director.getPhysicsManager().rayCast(wallCheckBottomP1, wallCheckBottomP2, cc.RayCastType.All);\n\n        if (edgeRayResults.length === 0) {\n            this.reachEdge = true;\n        } else {\n            for (let i = 0; i < edgeRayResults.length; i++) {\n                let result: cc.PhysicsRayCastResult = edgeRayResults[i];\n                let collider: cc.PhysicsCollider = result.collider;\n                if (collider.node.group === 'default') {\n                    this.reachEdge = false;\n                    break;\n                }\n                if (i === edgeRayResults.length - 1) {\n                    this.reachEdge = true;\n                }\n            }\n        }\n        if (!this.reachEdge && this.onTheGround) {\n            for (let i = 0; i < wallTopRayResults.length; i++) {\n                let result: cc.PhysicsRayCastResult = wallTopRayResults[i];\n                let collider: cc.PhysicsCollider = result.collider;\n                if (collider.node.group === 'default') {\n                    this.reachEdge = true;\n                    break;\n                }\n            }\n            if (!this.reachEdge) {\n                for (let i = 0; i < wallMediumRayResults.length; i++) {\n                    let result: cc.PhysicsRayCastResult = wallMediumRayResults[i];\n                    let collider: cc.PhysicsCollider = result.collider;\n                    if (collider.node.group === 'default') {\n                        this.reachEdge = true;\n                        break;\n                    }\n                }\n            }\n            if (!this.reachEdge) {\n                for (let i = 0; i < wallBottomRayResults.length; i++) {\n                    let result: cc.PhysicsRayCastResult = wallBottomRayResults[i];\n                    let collider: cc.PhysicsCollider = result.collider;\n                    if (collider.node.group === 'default') {\n                        this.reachEdge = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private onTheGroundCheck() {\n        const temp: cc.Vec3 = this.node.parent.convertToWorldSpaceAR(this.node.position);\n        const leftP1 = cc.v2(temp.x - 35 * Math.abs(this.node.scaleX), temp.y);\n        const leftP2 = cc.v2(temp.x - 35 * Math.abs(this.node.scaleX), temp.y - 110 * Math.abs(this.node.scaleX));\n        const rightP1 = cc.v2(temp.x + 35 * Math.abs(this.node.scaleX), temp.y);\n        const rightP2 = cc.v2(temp.x + 35 * Math.abs(this.node.scaleX), temp.y - 110 * Math.abs(this.node.scaleX));\n        const rayResultsLeft = cc.director.getPhysicsManager().rayCast(leftP1, leftP2, cc.RayCastType.All);\n        const rayResultsRight = cc.director.getPhysicsManager().rayCast(rightP1, rightP2, cc.RayCastType.All);\n\n        if (rayResultsLeft.length === 0 && rayResultsRight.length === 0) {\n            this.onTheGround = false;\n        } else {\n            for (let i = 0; i < rayResultsLeft.length; i++) {\n                let result: cc.PhysicsRayCastResult = rayResultsLeft[i];\n                let collider: cc.PhysicsCollider = result.collider;\n                if (collider.node.group === 'default') {\n                    this.onTheGround = true;\n                    break;\n                }\n            }\n            if (!this.onTheGround) {\n                for (let i = 0; i < rayResultsRight.length; i++) {\n                    let result: cc.PhysicsRayCastResult = rayResultsRight[i];\n                    let collider: cc.PhysicsCollider = result.collider;\n                    if (collider.node.group === 'default') {\n                        this.onTheGround = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private playIdleAnimation() {\n        if (this.monsterAnimation.currentClip?.name !== 'RangedMonsterIdle') {\n            this.monsterAnimation.play('RangedMonsterIdle');\n        }\n    }\n\n    private playWalkAnimation() {\n        if (this.monsterAnimation.currentClip?.name !== 'RangedMonsterWalk') {\n            this.monsterAnimation.play('RangedMonsterWalk');\n        }\n    }\n\n    private playShootAnimation() {\n        if (this.onTheGround) {\n            cc.audioEngine.playEffect(this.shootEffect, false);\n            this.monsterAnimation.play('monsterShoot');\n            this.schedule(this.shootBullet, 0.5, 0);\n        }\n    }\n\n    private playDeathAnimation() {\n        cc.audioEngine.playEffect(this.deathEffect, false);\n        let anim = cc.instantiate(this.monsterDeathAnimation);\n        anim.setPosition(this.node.getPosition());\n        anim.scaleX = this.node.scaleX;\n        this.node.parent.addChild(anim);\n        anim.getComponent(cc.Animation).play('RangedMonsterDeath');\n    }\n\n    //射子彈\n    private shootBullet() {\n        if (!this.player.getComponent(PlayerManager).status) {\n            this.unschedule(this.playShootAnimation);\n            return;\n        }\n        const monsterWorldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        const bullet: cc.Node = cc.instantiate(this.bullet);\n        const distanceX = this.player.parent.convertToNodeSpaceAR(monsterWorldPos).x - this.player.x;\n        const distanceY = this.player.parent.convertToNodeSpaceAR(monsterWorldPos).y - this.player.y;\n\n        bullet.setPosition(monsterWorldPos);\n        this.node.parent.addChild(bullet);\n\n        //計算子彈要射擊的角度\n        const radian = Math.atan(distanceY / distanceX);\n        let angle = (radian * 180) / Math.PI;\n        if (distanceX > 0) {\n            angle += 180;\n        }\n        //將子彈射擊(移動)速度和角度傳參數給子彈節點\n        bullet.children[0].getComponent(Bullet).setBulletParameter(500, angle);\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class JaggedBody extends cc.Component {\n\n    private _pos: cc.Vec3 = null;\n\n\n    onLoad () {\n        this._pos = this.node.position;\n    }    \n    \n    update (dt) {\n        this.node.position = this._pos;\n        this.getComponent(cc.RigidBody).syncPosition(false);\n    }\n\n}\n","import TimeEffect from '../../TimeEffect';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class RollbackMechanism extends TimeEffect {\n    private isTracking: boolean = false;\n    private path: cc.Vec2[] = [];\n    private priviousPosition: cc.Vec2 = new cc.Vec2();\n    private priviousAngle: number = 0;\n\n    update() {\n        if (this.isTracking) {\n            if (this.node.position.x === this.priviousPosition.x && this.node.position.y === this.priviousPosition.y && this.node.angle === this.priviousAngle) {\n                this.isTracking = false;\n            }\n        }\n    }\n\n    public accelerate() {}\n    public slowdown() {}\n    public rollback() {}\n\n    public reset() {\n        this.path.length = 0;\n    }\n\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {}\n}\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class RollingRockMechanism extends TimeEffect {\r\n\r\n    private rigidBody: cc.RigidBody = null;\r\n    private path: cc.Vec2[] = new Array();\r\n    private angle: number[] = new Array();\r\n    private distances: number = 0;\r\n    private parent: cc.Node = null;\r\n    private initialPosition: cc.Vec3 = cc.v3();\r\n    private rollingBack: boolean = false;\r\n    private currentTween: cc.Tween = null;\r\n    onLoad() {\r\n        this.parent = this.node.parent;\r\n        this.status = \"normal\";\r\n        this.rigidBody = this.node.parent.getComponent(cc.RigidBody);\r\n        this.path.push(cc.v2(this.parent.x, this.parent.y));\r\n        this.angle.push(this.parent.angle);\r\n        this.initialPosition = cc.v3(-54.271, 604.451, this.parent.position.z);\r\n        this.currentTween = new cc.Tween();\r\n    }\r\n    update() {\r\n\r\n        if (!this.rollingBack) {\r\n            if (this.rigidBody.linearVelocity.x < 300 && this.rigidBody.linearVelocity.y > -200) {\r\n                this.parent.group = \"default\";\r\n            } else {\r\n                this.parent.group = \"Damage\";\r\n            }\r\n            this.distances = Math.sqrt((Math.pow((this.parent.x - this.path[(this.path.length - 1)].x), 2)) + (Math.pow((this.parent.y - this.path[(this.path.length - 1)].y), 2)));\r\n            if (this.distances >= 10) {\r\n\r\n                this.path.push(cc.v2(this.parent.x, this.parent.y));\r\n                this.angle.push(this.parent.angle);\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private returnToOriginPos(index: number) {\r\n\r\n\r\n        //index < 0代表已回到原本的開始記錄位置,可做後續處理\r\n        if (index < 0) {\r\n\r\n            this.currentTween.stop();\r\n            this.status = 'normal';\r\n            this.rigidBody.type = cc.RigidBodyType.Dynamic;\r\n            this.rigidBody.linearVelocity = cc.v2(0, 0);\r\n            this.parent.position = this.initialPosition;\r\n            this.parent.angle = 0;\r\n            this.path = new Array();\r\n            this.angle = new Array();\r\n            this.path.push(cc.v2(this.parent.x, this.parent.y));\r\n            this.angle.push(this.parent.angle);\r\n            this.rollingBack = false;\r\n            return;\r\n        }\r\n        //按照紀錄的位置移動,每次完成移動後就把index - 1然後重新呼叫本function\r\n        this.currentTween = cc.tween(this.parent)\r\n            .parallel(\r\n                cc.tween().to(0.04, { x: this.path[index].x }),\r\n                cc.tween().to(0.04, { y: this.path[index].y }),\r\n                cc.tween().to(0.04, { angle: this.angle[index] }))\r\n            .call(() => { this.returnToOriginPos(index - 1) })\r\n            .start();\r\n    }\r\n\r\n    public rollback() {\r\n\r\n        this.status = 'original';\r\n        this.parent.group = \"default\";\r\n        this.rollingBack = true;\r\n        this.returnToOriginPos(this.path.length - 1);\r\n\r\n    }\r\n\r\n    public accelerate() {\r\n\r\n    }\r\n\r\n    public slowdown() {\r\n        this.rigidBody.linearVelocity = cc.v2(0, 0);\r\n        //this.rigidBody.linearVelocity = cc.v2(this.rigidBody.linearVelocity.x / 5, this.rigidBody.linearVelocity.y / 5);\r\n    }\r\n\r\n    public reset() {\r\n\r\n        this.currentTween.stop();\r\n        this.status = 'normal';\r\n        this.rigidBody.type = cc.RigidBodyType.Dynamic;\r\n        this.rigidBody.linearVelocity = cc.v2(0, 0);\r\n        this.parent.position = this.initialPosition;\r\n        this.parent.angle = 0;\r\n        this.path = new Array();\r\n        this.angle = new Array();\r\n        this.path.push(cc.v2(this.parent.x, this.parent.y));\r\n        this.angle.push(this.parent.angle);\r\n        this.rollingBack = false;\r\n    }\r\n}\r\n","import TimeEffect from '../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SceneManager extends cc.Component {\r\n    @property([TimeEffect])\r\n    private mechanisms: TimeEffect[] = [];\r\n\r\n    @property([cc.Node])\r\n    private rangedMonsters: cc.Node[] = [];\r\n\r\n    @property([cc.Node])\r\n    private meleeMonsters: cc.Node[] = [];\r\n\r\n    @property([cc.Node])\r\n    private climbMonsters: cc.Node[] = [];\r\n\r\n    @property([cc.Node])\r\n    private specialMonsters: cc.Node[] = [];\r\n\r\n    @property(cc.Prefab)\r\n    private rangedMonsterPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    private meleeMonsterPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    private climbMonsterPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    private specialMonsterPrefab: cc.Prefab = null;\r\n\r\n    @property([cc.Vec2])\r\n    private floorWidthEdgeOffset: cc.Vec2[] = []; // x: top, y: down\r\n\r\n    @property([cc.Node])\r\n    private floorDetected: cc.Node[] = [];\r\n\r\n    @property(cc.Vec2)\r\n    public initialCameraPosition: cc.Vec2 = null;\r\n\r\n    private rangedMonsterPositions: cc.Vec2[] = [];\r\n    private meleeMonsterPositions: cc.Vec2[] = [];\r\n    private climbMonsterPositions: cc.Vec2[] = [];\r\n    private specialMonsterPositions: cc.Vec2[] = [];\r\n    private currentFloor: number = 0;\r\n\r\n    onLoad() {\r\n        this.rangedMonsterPositions = this.rangedMonsters.map((monster) => monster.getPosition());\r\n        this.meleeMonsterPositions = this.meleeMonsters.map((monster) => monster.getPosition());\r\n        this.climbMonsterPositions = this.climbMonsters.map((monster) => monster.getPosition());\r\n        this.specialMonsterPositions = this.specialMonsters.map((monster) => monster.getPosition());\r\n        this.floorDetected.forEach((node, idx) => {\r\n            node.on('crossFloor', () => {\r\n                this.currentFloor = idx;\r\n            });\r\n        });\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event: cc.Event.EventKeyboard) => {\r\n            if (event.keyCode === cc.macro.KEY.z) {\r\n                this.currentFloor = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    public getCurrentFloorEdgeOffset() {\r\n        return this.floorWidthEdgeOffset[this.currentFloor];\r\n    }\r\n\r\n    public reset() {\r\n        this.node.active = true;\r\n        this.currentFloor = 0;\r\n        this.mechanisms.forEach((mechanism) => mechanism.reset());\r\n\r\n        // 清除剩餘怪物\r\n        this.rangedMonsters.forEach((monster) => {\r\n            if (monster.isValid) {\r\n                monster.removeFromParent();\r\n                monster.destroy();\r\n            }\r\n        });\r\n        this.meleeMonsters.forEach((monster) => {\r\n            if (monster.isValid) {\r\n                monster.removeFromParent();\r\n                monster.destroy();\r\n            }\r\n        });\r\n        this.climbMonsters.forEach((monster) => {\r\n            if (monster.isValid) {\r\n                monster.removeFromParent();\r\n                monster.destroy();\r\n            }\r\n        });\r\n        this.specialMonsters.forEach((monster) => {\r\n            if (monster.isValid) {\r\n                monster.removeFromParent();\r\n                monster.destroy();\r\n            }\r\n        });\r\n        this.rangedMonsters.length = 0;\r\n        this.meleeMonsters.length = 0;\r\n        this.climbMonsters.length = 0;\r\n        this.specialMonsters.length = 0;\r\n\r\n        // 依照怪物位置表生成怪物\r\n        this.rangedMonsterPositions.forEach((position) => {\r\n            const node: cc.Node = cc.instantiate(this.rangedMonsterPrefab);\r\n            node.setPosition(position);\r\n            this.rangedMonsters.push(node);\r\n            this.node.addChild(node);\r\n        });\r\n        this.meleeMonsterPositions.forEach((position) => {\r\n            const node: cc.Node = cc.instantiate(this.meleeMonsterPrefab);\r\n            node.setPosition(position);\r\n            this.meleeMonsters.push(node);\r\n            this.node.addChild(node);\r\n        });\r\n        this.climbMonsterPositions.forEach((position) => {\r\n            const node: cc.Node = cc.instantiate(this.climbMonsterPrefab);\r\n            node.setPosition(position);\r\n            this.meleeMonsters.push(node);\r\n            this.node.addChild(node);\r\n        });\r\n        this.specialMonsterPositions.forEach((position) => {\r\n            const node: cc.Node = cc.instantiate(this.specialMonsterPrefab);\r\n            node.setPosition(position);\r\n            this.specialMonsters.push(node);\r\n            this.node.addChild(node);\r\n        });\r\n    }\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n    @property(cc.Node)\r\n    private mask: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private volumeToggle: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private closeBtn: cc.Node = null;\r\n\r\n    @property(cc.AudioClip)\r\n    private buttonEffect: cc.AudioClip = null;\r\n\r\n    onLoad() {\r\n        this.mask.on(cc.Node.EventType.TOUCH_END, () => this.close());\r\n        this.volumeToggle.on('toggle', () => {\r\n            if (cc.audioEngine.getMusicVolume() === 0) {\r\n                cc.audioEngine.setMusicVolume(0.5);\r\n                cc.audioEngine.setEffectsVolume(0.5);\r\n                cc.audioEngine.playEffect(this.buttonEffect, false);\r\n            } else {\r\n                console.log('setting page mute');\r\n                cc.audioEngine.setMusicVolume(0);\r\n                cc.audioEngine.setEffectsVolume(0);\r\n            }\r\n        });\r\n        this.closeBtn.on(cc.Node.EventType.TOUCH_END, () => this.close());\r\n        this.node.active = false;\r\n        this.node.opacity = 255;\r\n    }\r\n\r\n    public open() {\r\n        this.node.active = true;\r\n        if (cc.audioEngine.getMusicVolume() === 0) {\r\n            this.volumeToggle.getComponent(cc.Toggle).isChecked = true;\r\n        } else {\r\n            this.volumeToggle.getComponent(cc.Toggle).isChecked = false;\r\n        }\r\n    }\r\n\r\n    private close() {\r\n        this.node.active = false;\r\n    }\r\n}\r\n","import TimeEffect from '../../TimeEffect';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class SilkMechanism extends TimeEffect {\n    @property(cc.Animation)\n    private silkAnimation: cc.Animation = null;\n    @property(cc.Boolean)\n    private silkStatus: boolean = false;\n    @property(cc.AudioClip)\n    private skilkEffect: cc.AudioClip = null;\n\n    onLoad() {\n        this.status = this.silkStatus === true ? 'triggered' : 'original';\n        this.silkAnimation.on('play', () => {\n            this.status = 'transforming';\n        });\n        this.silkAnimation.on('finished', () => {\n            this.status = this.silkAnimation.currentClip.name === 'silkGrows' ? 'triggered' : 'original';\n            const climbCollider: cc.BoxCollider = this.silkAnimation.getComponent(cc.BoxCollider);\n            const skillCollider: cc.BoxCollider = this.getComponent(cc.BoxCollider);\n            if (this.silkAnimation.currentClip.name === 'silkGrows') {\n                skillCollider.size.height = 596;\n                skillCollider.offset.y = -302;\n                climbCollider.size.height = 437;\n                climbCollider.offset.y = -41;\n            } else {\n                skillCollider.size.height = 215;\n                skillCollider.offset.y = -112;\n                climbCollider.size.height = 155;\n                climbCollider.offset.y = 100;\n            }\n        });\n    }\n\n    public rollback() {\n        cc.audioEngine.playEffect(this.skilkEffect, false);\n        this.silkAnimation.play('silkGrownBack');\n    }\n\n    public accelerate() {\n        cc.audioEngine.playEffect(this.skilkEffect, false);\n        this.silkAnimation.play('silkGrows');\n    }\n\n    public slowdown() {}\n\n    public reset() {\n        if (this.silkStatus) {\n            this.status = 'triggered';\n            this.silkAnimation.play('silkGrows');\n        } else {\n            this.status = 'original';\n            this.silkAnimation.play('silkGrownBack');\n        }\n    }\n}\n","import SceneManager from '../Scene/SceneManager';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SkillCast extends cc.Component {\r\n    @property(cc.Node)\r\n    private skillRange: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private camera: cc.Node = null;\r\n\r\n    private userPointer: cc.BoxCollider = null;\r\n    private originalPointerPosition: cc.Vec2 = cc.v2(640, 360);\r\n    private scene: cc.Node = null;\r\n    private currentCollider: cc.Collider = null;\r\n    private secondCollider: cc.Collider = null;\r\n\r\n    onLoad() {\r\n        cc.director.getCollisionManager().enabled = true;\r\n        // cc.director.getCollisionManager().enabledDebugDraw = true;\r\n        this.userPointer = this.node.getComponent(cc.BoxCollider);\r\n        this.userPointer.getComponent(cc.Animation).play();\r\n        this.scene = this.node.parent.getComponentsInChildren(SceneManager).filter((sceneManager) => sceneManager.node.active === true)[0].node;\r\n        this.scene.on(cc.Node.EventType.MOUSE_MOVE, this.trackPointerPosition, this);\r\n        this.scene.on(cc.Node.EventType.MOUSE_UP, this.onPointerClick, this);\r\n    }\r\n\r\n    update() {\r\n        if (this.userPointer.node.active) {\r\n            this.addCameraOffset();\r\n        }\r\n    }\r\n\r\n    public changeScene() {\r\n        this.currentCollider = null;\r\n        this.secondCollider = null;\r\n        this.scene.off(cc.Node.EventType.MOUSE_MOVE, this.trackPointerPosition, this);\r\n        this.scene.off(cc.Node.EventType.MOUSE_UP, this.onPointerClick, this);\r\n        this.scene = this.node.parent.getComponentsInChildren(SceneManager).filter((sceneManager) => sceneManager.node.active === true)[0].node;\r\n        this.scene.on(cc.Node.EventType.MOUSE_MOVE, this.trackPointerPosition, this);\r\n        this.scene.on(cc.Node.EventType.MOUSE_UP, this.onPointerClick, this);\r\n    }\r\n\r\n    private trackPointerPosition(event: cc.Event.EventMouse) {\r\n        const originalPos: cc.Vec2 = new cc.Vec2(event.getLocationX(), event.getLocationY());\r\n        const localPos: cc.Vec2 = this.node.parent.convertToNodeSpaceAR(originalPos);\r\n        this.originalPointerPosition = localPos;\r\n        this.addCameraOffset();\r\n    }\r\n\r\n    private onPointerClick() {\r\n        if (this.currentCollider && this.rangeCheck()) {\r\n            this.node.emit('skillHit', this.currentCollider);\r\n            console.log('emit skill hit');\r\n        }\r\n    }\r\n\r\n    private onCollisionEnter(other: cc.Collider) {\r\n        // 顯示時鐘pointer\r\n        this.node.getComponent(cc.Sprite).enabled = true;\r\n        if (this.currentCollider !== null) {\r\n            this.secondCollider = other;\r\n        } else {\r\n            this.currentCollider = other;\r\n        }\r\n    }\r\n\r\n    private onCollisionExit() {\r\n        if (this.secondCollider === null) {\r\n            this.node.getComponent(cc.Sprite).enabled = false;\r\n            this.currentCollider = null;\r\n        } else {\r\n            this.currentCollider = this.secondCollider;\r\n            this.secondCollider = null;\r\n        }\r\n    }\r\n\r\n    private addCameraOffset() {\r\n        this.userPointer.node.x = this.originalPointerPosition.x / this.camera.getComponent(cc.Camera).zoomRatio + this.camera.x;\r\n        this.userPointer.node.y = this.originalPointerPosition.y / this.camera.getComponent(cc.Camera).zoomRatio + this.camera.y;\r\n    }\r\n\r\n    private rangeCheck(): boolean {\r\n        const skillRangeWorldPosition: cc.Vec3 = this.skillRange.parent.convertToWorldSpaceAR(this.skillRange.position);\r\n        return cc.Intersection.polygonCircle(this.userPointer.world.points, {\r\n            position: new cc.Vec2(skillRangeWorldPosition.x, skillRangeWorldPosition.y),\r\n            radius: (this.skillRange.width / 2 / 2.2) * this.skillRange.scale, // width / 2, parent scale, self scale\r\n        });\r\n    }\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SpecialButton extends cc.Component {\r\n    @property(cc.AudioClip)\r\n    private buttonEffect: cc.AudioClip = null;\r\n\r\n    private animState: cc.AnimationState = null;\r\n    private onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\r\n        if (other.node.name === 'Player') {\r\n            this.node.emit('triggered');\r\n            if (!this.animState?.isPlaying) {\r\n                const id: number = cc.audioEngine.playEffect(this.buttonEffect, false);\r\n                cc.audioEngine.setVolume(id, 1);\r\n                this.animState = this.node.getComponent(cc.Animation).play();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import MeleeAttack from './MeleeAttack';\r\nimport BulletDamage from './BulletDamage';\r\nimport PlayerManager from '../Player/PlayerManager';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MeleeMonster extends cc.Component {\r\n    @property(cc.Animation)\r\n    private monsterAnimation: cc.Animation = null;\r\n\r\n    @property(cc.Prefab)\r\n    private monsterDeathAnimation: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    private damageArea: cc.Prefab = null;\r\n\r\n    @property(cc.AudioClip)\r\n    private attackEffect: cc.AudioClip = null;\r\n\r\n    @property(cc.AudioClip)\r\n    private deathEffect: cc.AudioClip = null;\r\n\r\n    @property\r\n    private moveSpeed: number = 0;\r\n\r\n    @property\r\n    private freezeTime = 0;\r\n\r\n    private _moveDirection: boolean = true; // true: left, false: right\r\n    private onTheGround: boolean = false;\r\n    private playerFounded: boolean = false;\r\n    private startAttack: boolean = false;\r\n    private reachEdge: boolean = false;\r\n    private startAction: boolean = false;\r\n    private player: cc.Node = null;\r\n\r\n    update(dt: number) {\r\n        this.reachEdgeCheck();\r\n        this.onTheGroundCheck();\r\n        if (!this.startAction) {\r\n            this.playIdleAnimation();\r\n            return;\r\n        }\r\n        if (this.startAttack && this.onTheGround) {\r\n            this.playAttackAnimation();\r\n            this.schedule(this.playAttackAnimation, this.freezeTime, cc.macro.REPEAT_FOREVER, 0);\r\n        } else {\r\n            this.unschedule(this.playAttackAnimation);\r\n            if (this.monsterAnimation.currentClip?.name !== 'monsterAttack' && this.onTheGround) {\r\n                // 追蹤模式 距離保持 250，碰到邊界停下來\r\n                if (this.playerFounded) {\r\n                    const worldPos: cc.Vec2 = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\r\n                    const distance: number = this.player.x - this.player.parent.convertToNodeSpaceAR(worldPos).x;\r\n                    const direction: boolean = distance < 0; // true: player在怪物右邊 false: player在怪物右邊\r\n                    this.moveDirection = direction;\r\n                    if (!this.reachEdge) {\r\n                        this.node.x += this.moveSpeed * dt * (direction ? -1 : 1);\r\n                        this.playRunAnimation();\r\n                    } else {\r\n                        this.playIdleAnimation();\r\n                    }\r\n                } else {\r\n                    // 普通模式下，碰到邊界後往反方向走\r\n                    if (this.reachEdge) {\r\n                        this.moveDirection = !this._moveDirection;\r\n                        this.reachEdge = false;\r\n                    }\r\n                    this.node.x += this.moveSpeed * dt * (this._moveDirection ? -1 : 1);\r\n                    this.playWalkAnimation();\r\n                }\r\n            }\r\n            if (!this.onTheGround) {\r\n                this.playIdleAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    private set moveDirection(isLeft: boolean) {\r\n        if (this._moveDirection !== isLeft) {\r\n            this._moveDirection = isLeft;\r\n            this.node.scaleX = this._moveDirection ? -0.7 : 0.7;\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n        this.monsterAnimation.on('finished', this.playIdleAnimation, this);\r\n        this.startAction = false;\r\n    }\r\n\r\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        if (self.tag === 3 && other.node.name === 'Player') {\r\n            if (!this.startAction) {\r\n                this.startAction = true;\r\n            }\r\n        }\r\n        // 偵測區接觸到玩家後，開啟追蹤模式以及開始攻擊\r\n        if (self.tag === 0 && other.node.name === 'Player') {\r\n            this.playerFounded = true;\r\n            this.player = other.node;\r\n        } else if (self.tag === 1) {\r\n            if (other.node.name === 'Deadline') {\r\n                // 怪物掉落\r\n                cc.audioEngine.playEffect(this.deathEffect, false);\r\n                this.node.destroy();\r\n            }\r\n        } else if (self.tag === 2 && other.node.name === 'Player') {\r\n            this.startAttack = true;\r\n        }\r\n    }\r\n\r\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\r\n        // 碰撞區與玩家結束接觸後，關閉追蹤模式及停止攻擊\r\n        if (self.tag === 0 && other.node.name === 'Player') {\r\n            this.playerFounded = false;\r\n        } else if (self.tag === 2 && other.node.name === 'Player') {\r\n            this.startAttack = false;\r\n        }\r\n    }\r\n\r\n    public onBeginContact(contact: cc.PhysicsContact, self: cc.PhysicsCollider, other: cc.PhysicsCollider) {\r\n        if (self.tag === 0 && other.node.group === 'Damage') {\r\n            this.playDeathAnimation();\r\n            this.node.destroy();\r\n        }\r\n    }\r\n\r\n    private reachEdgeCheck() {\r\n        let offset = this._moveDirection ? -55 : 55;\r\n        offset = offset * Math.abs(this.node.scaleX);\r\n\r\n        const temp: cc.Vec3 = this.node.parent.convertToWorldSpaceAR(this.node.position);\r\n        const edgeCheckP1: cc.Vec2 = cc.v2(temp.x + offset, temp.y);\r\n        const edgeCheckP2: cc.Vec2 = cc.v2(temp.x + offset, temp.y - 110 * Math.abs(this.node.scaleX));\r\n\r\n        const wallCheckTopP1: cc.Vec2 = cc.v2(temp.x, temp.y + 10 * Math.abs(this.node.scaleX));\r\n        const wallCheckTopP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y + 10 * Math.abs(this.node.scaleX));\r\n        const wallCheckMediumP1: cc.Vec2 = cc.v2(temp.x, temp.y - 40 * Math.abs(this.node.scaleX));\r\n        const wallCheckMediumP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y - 40 * Math.abs(this.node.scaleX));\r\n        const wallCheckBottomP1: cc.Vec2 = cc.v2(temp.x, temp.y - 85 * Math.abs(this.node.scaleX));\r\n        const wallCheckBottomP2: cc.Vec2 = cc.v2(temp.x + offset * 1.2, temp.y - 85 * Math.abs(this.node.scaleX));\r\n\r\n        const edgeRayResults = cc.director.getPhysicsManager().rayCast(edgeCheckP1, edgeCheckP2, cc.RayCastType.All);\r\n        const wallTopRayResults = cc.director.getPhysicsManager().rayCast(wallCheckTopP1, wallCheckTopP2, cc.RayCastType.All);\r\n        const wallMediumRayResults = cc.director.getPhysicsManager().rayCast(wallCheckMediumP1, wallCheckMediumP2, cc.RayCastType.All);\r\n        const wallBottomRayResults = cc.director.getPhysicsManager().rayCast(wallCheckBottomP1, wallCheckBottomP2, cc.RayCastType.All);\r\n\r\n        if (edgeRayResults.length === 0) {\r\n            this.reachEdge = true;\r\n        } else {\r\n            for (let i = 0; i < edgeRayResults.length; i++) {\r\n                let result: cc.PhysicsRayCastResult = edgeRayResults[i];\r\n                let collider: cc.PhysicsCollider = result.collider;\r\n                if (collider.node.group === 'default') {\r\n                    this.reachEdge = false;\r\n                    break;\r\n                }\r\n                if (i === edgeRayResults.length - 1) {\r\n                    this.reachEdge = true;\r\n                }\r\n            }\r\n        }\r\n        if (!this.reachEdge && this.onTheGround) {\r\n            for (let i = 0; i < wallTopRayResults.length; i++) {\r\n                let result: cc.PhysicsRayCastResult = wallTopRayResults[i];\r\n                let collider: cc.PhysicsCollider = result.collider;\r\n                if (collider.node.group === 'default') {\r\n                    this.reachEdge = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!this.reachEdge) {\r\n                for (let i = 0; i < wallMediumRayResults.length; i++) {\r\n                    let result: cc.PhysicsRayCastResult = wallMediumRayResults[i];\r\n                    let collider: cc.PhysicsCollider = result.collider;\r\n                    if (collider.node.group === 'default') {\r\n                        this.reachEdge = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!this.reachEdge) {\r\n                for (let i = 0; i < wallBottomRayResults.length; i++) {\r\n                    let result: cc.PhysicsRayCastResult = wallBottomRayResults[i];\r\n                    let collider: cc.PhysicsCollider = result.collider;\r\n                    if (collider.node.group === 'default') {\r\n                        this.reachEdge = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onTheGroundCheck() {\r\n        const temp: cc.Vec3 = this.node.parent.convertToWorldSpaceAR(this.node.position);\r\n        const leftP1 = cc.v2(temp.x - 35 * Math.abs(this.node.scaleX), temp.y);\r\n        const leftP2 = cc.v2(temp.x - 35 * Math.abs(this.node.scaleX), temp.y - 110 * Math.abs(this.node.scaleX));\r\n        const rightP1 = cc.v2(temp.x + 35 * Math.abs(this.node.scaleX), temp.y);\r\n        const rightP2 = cc.v2(temp.x + 35 * Math.abs(this.node.scaleX), temp.y - 110 * Math.abs(this.node.scaleX));\r\n        const rayResultsLeft = cc.director.getPhysicsManager().rayCast(leftP1, leftP2, cc.RayCastType.All);\r\n        const rayResultsRight = cc.director.getPhysicsManager().rayCast(rightP1, rightP2, cc.RayCastType.All);\r\n\r\n        if (rayResultsLeft.length === 0 && rayResultsRight.length === 0) {\r\n            this.onTheGround = false;\r\n        } else {\r\n            for (let i = 0; i < rayResultsLeft.length; i++) {\r\n                let result: cc.PhysicsRayCastResult = rayResultsLeft[i];\r\n                let collider: cc.PhysicsCollider = result.collider;\r\n                if (collider.node.group === 'default') {\r\n                    this.onTheGround = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (this.onTheGround === false) {\r\n                for (let i = 0; i < rayResultsRight.length; i++) {\r\n                    let result: cc.PhysicsRayCastResult = rayResultsRight[i];\r\n                    let collider: cc.PhysicsCollider = result.collider;\r\n                    if (collider.node.group === 'default') {\r\n                        this.onTheGround = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private playIdleAnimation() {\r\n        if (this.monsterAnimation.currentClip?.name !== 'monsterIdle') {\r\n            this.monsterAnimation.play('monsterIdle');\r\n        }\r\n    }\r\n\r\n    private playWalkAnimation() {\r\n        if (this.monsterAnimation.currentClip?.name !== 'monsterWalk') {\r\n            this.monsterAnimation.play('monsterWalk');\r\n        }\r\n    }\r\n\r\n    private playRunAnimation() {\r\n        if (this.monsterAnimation.currentClip?.name !== 'monsterRun') {\r\n            this.monsterAnimation.play('monsterRun');\r\n        }\r\n    }\r\n\r\n    private playAttackAnimation() {\r\n        if (!this.player.getComponent(PlayerManager).status) {\r\n            this.unschedule(this.playAttackAnimation);\r\n            return;\r\n        }\r\n        if (this.monsterAnimation.currentClip?.name !== 'monsterAttack') {\r\n            this.monsterAnimation.play('monsterAttack');\r\n            this.schedule(this.generateDamageArea, 0.5, 0);\r\n        }\r\n    }\r\n\r\n    private playDeathAnimation() {\r\n        cc.audioEngine.playEffect(this.deathEffect, false);\r\n        let anim = cc.instantiate(this.monsterDeathAnimation);\r\n        anim.setPosition(this.node.getPosition());\r\n        anim.scaleX = this.node.scaleX;\r\n        this.node.parent.addChild(anim);\r\n        anim.getComponent(cc.Animation).play('monsterDeath');\r\n    }\r\n\r\n    private generateDamageArea() {\r\n        cc.audioEngine.playEffect(this.attackEffect, false);\r\n        let newArea = cc.instantiate(this.damageArea);\r\n        const offset = this._moveDirection ? -40 : 40;\r\n        newArea.setPosition(this.node.x + offset, this.node.y);\r\n        this.node.parent.addChild(newArea);\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class StairMechanism extends TimeEffect {\r\n    @property(cc.Animation)\r\n    private stairAnimation: cc.Animation = null;\r\n    @property(cc.PhysicsPolygonCollider)\r\n    private pCollider: cc.PhysicsPolygonCollider = null;\r\n    @property(cc.PhysicsBoxCollider)\r\n    private bCollider: cc.PhysicsPolygonCollider = null;\r\n    @property(cc.AudioClip)\r\n    private break: cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    private build: cc.AudioClip = null;\r\n\r\n    onLoad() {\r\n        this.status = 'triggered';\r\n        this.pCollider.enabled = false;\r\n        this.bCollider.enabled = true;\r\n        this.stairAnimation.on('play', () => {\r\n            this.status = 'transforming';\r\n        });\r\n        this.stairAnimation.on('finished', () => {\r\n            if(this.stairAnimation.currentClip.name === 'StairBreak' ){\r\n                this.status = 'triggered';\r\n                this.pCollider.enabled = false;\r\n                this.bCollider.enabled = true;\r\n            }else{\r\n                this.status = 'original';\r\n                this.pCollider.enabled = true;\r\n                this.bCollider.enabled = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    public rollback() {\r\n        cc.audioEngine.playEffect(this.build,false);\r\n        this.stairAnimation.play('StairBuild');\r\n    }\r\n\r\n    public accelerate() {\r\n        cc.audioEngine.playEffect(this.break,false);\r\n        this.stairAnimation.play('StairBreak');\r\n    }\r\n\r\n    public slowdown() {}\r\n\r\n    public reset() {\r\n            this.status = 'triggered';\r\n            this.stairAnimation.play('StairBreak');\r\n        }\r\n}\r\n\r\n","import TimeEffect from '../TimeEffect';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class StretchPlatformMechanism extends TimeEffect {\n    @property\n    private initX: number = 0;\n\n    @property\n    private targetX: number = 0;\n\n    private currentTween: cc.Tween = null;\n    private currentSpeed: number = 1;\n    private energeSpeed: number = 1;\n    private distance: number = 0;\n    private isMoving: boolean = false;\n    private toRight: boolean = true;\n\n    onLoad() {\n        this.node.zIndex = -1;\n        this.distance = this.targetX - this.initX;\n    }\n\n    public stretch() {\n        this.currentTween?.stop();\n        this.isMoving = true;\n        this.toRight = true;\n        this.currentTween = cc\n            .tween(this.node)\n            .to((2.5 * (this.targetX - this.node.x)) / this.distance, { x: this.targetX })\n            .call(() => (this.isMoving = false))\n            .start();\n        (this.currentTween as any)._finalAction._speedMethod = true;\n        (this.currentTween as any)._finalAction._speed = this.currentSpeed * this.energeSpeed;\n    }\n\n    public shrink() {\n        this.currentTween?.stop();\n        this.isMoving = true;\n        this.toRight = false;\n        this.currentTween = cc\n            .tween(this.node)\n            .to((2.5 * (this.node.x - this.initX)) / this.distance, { x: this.initX })\n            .call(() => (this.isMoving = false))\n            .start();\n        (this.currentTween as any)._finalAction._speedMethod = true;\n        (this.currentTween as any)._finalAction._speed = this.currentSpeed * this.energeSpeed;\n    }\n\n    public changeSpeed(speed: number) {\n        this.currentSpeed = speed;\n        if (this.isMoving) {\n            (this.currentTween as any)._finalAction._speed = speed * this.energeSpeed;\n        }\n    }\n\n    public changeDirection() {\n        if (this.isMoving) {\n            if (this.toRight) {\n                this.shrink();\n            } else {\n                this.stretch();\n            }\n        }\n    }\n\n    public accelerate() {}\n\n    public slowdown() {}\n\n    public rollback() {}\n\n    public reset() {\n        this.currentTween?.stop();\n        this.energeSpeed = 1;\n        this.isMoving = false;\n        this.toRight = true;\n        this.node.x = this.initX;\n    }\n\n    private onCollisionEnter(other: cc.Collider) {\n        if (other.node.name === 'EnergyRockSkillArea') {\n            this.energeSpeed = 5;\n            this.changeSpeed(this.currentSpeed);\n        }\n    }\n\n    private onCollisionExit(other: cc.Collider) {\n        if (other.node.name === 'EnergyRockSkillArea') {\n            this.energeSpeed = 1;\n            this.changeSpeed(this.currentSpeed);\n        }\n    }\n}\n","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TerrainGenerator extends cc.Component {\r\n    onLoad() {\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        //cc.director.getPhysicsManager().debugDrawFlags = 1; // for collider debug\r\n        // 獲取 tiledMap 資訊\r\n        const tiledmap: cc.TiledMap = this.node.getComponent(cc.TiledMap);\r\n        const tiledSize = tiledmap.getTileSize();\r\n        const layer = tiledmap.getLayer('platform');\r\n        const layerSize = layer.getLayerSize();\r\n\r\n        // 每格掃描 若有物件則生成 collider & rigidBody\r\n        for (let i = 0; i < layerSize.width; i++) {\r\n            for (let j = 0; j < layerSize.height; j++) {\r\n                const tiled: cc.TiledTile = layer.getTiledTileAt(i, j, true);\r\n                if (tiled.gid != 0) {\r\n                    const body: cc.RigidBody = tiled.node.addComponent(cc.RigidBody);\r\n                    const physicsCollider: cc.PhysicsBoxCollider = tiled.node.addComponent(cc.PhysicsBoxCollider);\r\n                    \r\n                    tiled.node.group = 'default';\r\n                    body.type = cc.RigidBodyType.Static;\r\n                    physicsCollider.offset = cc.v2(tiledSize.width / 2, tiledSize.height / 2);\r\n                    physicsCollider.size = tiledSize;\r\n                    physicsCollider.apply();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ThornMechanism extends TimeEffect {\r\n    @property(cc.Animation)\r\n    private vineAnimation: cc.Animation = null;\r\n    @property(cc.Node)\r\n    private thorn: cc.Node = null;\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    onLoad() {\r\n        this.status = 'triggered';\r\n        this.vineAnimation.on('play', () => {\r\n            this.status = 'transforming';\r\n        });\r\n        this.vineAnimation.on('finished', () => {\r\n            this.status = this.vineAnimation.currentClip.name === 'thornGrows' ? 'triggered' : 'original';\r\n        });\r\n    }\r\n\r\n    public rollback() {\r\n        cc.audioEngine.playEffect(this.sound,false);\r\n        this.vineAnimation.play('thornGrownback');\r\n        let hurtCollider = this.thorn.getComponent(cc.PhysicsBoxCollider);\r\n        hurtCollider.enabled = false;\r\n    }\r\n\r\n    public accelerate() {\r\n        cc.audioEngine.playEffect(this.sound,false);\r\n        this.vineAnimation.play('thornGrows');\r\n        let hurtCollider = this.thorn.getComponent(cc.PhysicsBoxCollider);\r\n        hurtCollider.enabled = true;\r\n    }\r\n\r\n    public slowdown() {}\r\n\r\n    public reset() {\r\n        // const climbCollider: cc.BoxCollider = this.vineAnimation.getComponent(cc.BoxCollider);\r\n        // const skillCollider: cc.BoxCollider = this.getComponent(cc.BoxCollider);\r\n        this.status = 'triggered';\r\n        let hurtCollider = this.thorn.getComponent(cc.PhysicsBoxCollider);\r\n        hurtCollider.enabled = true;\r\n        this.vineAnimation.play('thornGrows');\r\n        // climbCollider.size.height = this.vineAnimation.node.height;\r\n        // climbCollider.offset.y = -this.vineAnimation.node.height / 2;\r\n        // skillCollider.size.height = 300;\r\n        // skillCollider.offset.y = -150;\r\n    }\r\n}\r\n","import { SkillSet } from './Player/PlayerManager';\r\n\r\nconst { ccclass } = cc._decorator;\r\n\r\n@ccclass\r\nexport default abstract class TimeEffect extends cc.Component {\r\n    protected status: 'original' | 'transforming' | 'triggered' | 'normal' | 'speedup' | 'slowdown' = 'original';\r\n    public abstract rollback(): void;\r\n    public abstract accelerate(): void;\r\n    public abstract slowdown(): void;\r\n    public abstract reset(): void;\r\n    public checkStatus(toDo: SkillSet) {\r\n        const { none, accelerate, slowdown, rollback } = SkillSet;\r\n        switch (toDo) {\r\n            case accelerate: {\r\n                if (this.status === 'original' || this.status === 'normal' || this.status === 'slowdown') {\r\n                    return true;\r\n                }\r\n                break;\r\n            }\r\n            case slowdown: {\r\n                if (this.status === 'transforming' || this.status === 'normal' || this.status === 'speedup') {\r\n                    return true;\r\n                }\r\n                break;\r\n            }\r\n            case rollback: {\r\n                if (this.status === 'triggered' || this.status === 'normal' || this.status === 'speedup' || this.status === 'slowdown') {\r\n                    return true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\nimport FakeRock from './FakeRock';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TouchedMechanism extends TimeEffect {\r\n    @property(FakeRock)\r\n    private fakeRock: FakeRock = null;\r\n\r\n    private hasReturn: boolean = false;\r\n\r\n    onLoad() {\r\n        this.status = 'triggered';\r\n    }\r\n\r\n    update() {\r\n        this.node.getComponent(cc.BoxCollider).offset.y = 381 + this.fakeRock.node.y;\r\n    }\r\n\r\n    public rollback() {\r\n        if (!this.hasReturn && this.fakeRock.isDrop) {\r\n            this.hasReturn = true;\r\n            this.fakeRock.rollback();\r\n        }\r\n    }\r\n\r\n    public accelerate() {}\r\n\r\n    public slowdown() {}\r\n\r\n    public reset() {\r\n        this.fakeRock.reset();\r\n        this.hasReturn = false;\r\n        this.node.getComponent(cc.BoxCollider).offset.y = 381;\r\n    }\r\n}\r\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class TransitionController extends cc.Component {\n    @property(cc.Label)\n    private message: cc.Label = null;\n\n    @property(cc.Label)\n    private hint: cc.Label = null;\n\n    @property(cc.Node)\n    private mask: cc.Node = null;\n\n    private tween: cc.Tween = null;\n\n    public showGameResult(isWin: boolean) {\n        this.node.opacity = 0;\n        this.mask.opacity = 150;\n        this.hint.node.active = true;\n        this.message.node.scale = 1;\n        this.message.node.active = true;\n        this.message.node.setPosition(0, 60);\n        this.node.active = true;\n        if (isWin) {\n            this.message.string = 'CONGRATULATION';\n            this.message.node.color = new cc.Color(255, 153, 0);\n        } else {\n            this.message.string = 'GAME OVER';\n            this.message.node.color = new cc.Color(255, 0, 0);\n        }\n        cc.tween(this.node)\n            .to(2, { opacity: 255 })\n            .call(() => {\n                this.tween = cc\n                    .tween(this.hint.node)\n                    .then(cc.tween().to(0.5, { opacity: 255 }).to(0.5, { opacity: 0 }))\n                    .repeatForever()\n                    .start();\n                this.node.once(cc.Node.EventType.TOUCH_END, () => {\n                    this.node.active = false;\n                    this.tween.stop();\n                    this.hint.node.opacity = 0;\n                    this.hint.node.active = false;\n                    this.node.emit('back', isWin);\n                });\n            })\n            .start();\n    }\n\n    public openTransitionferStage() {\n        this.node.active = true;\n        this.message.node.active = false;\n        this.message.node.color = new cc.Color(255, 255, 255);\n        this.message.node.setPosition(435, -275);\n        this.message.node.scale = 0.2;\n        this.message.string = 'Loading ...';\n        this.mask.opacity = 0;\n        cc.tween(this.mask)\n            .to(1, { opacity: 255 })\n            .call(() => {\n                this.message.node.active = true;\n                this.scheduleOnce(() => this.node.emit('transitionEnd'), 0.1);\n            })\n            .start();\n    }\n\n    public closeTransitionStage() {\n        this.message.node.active = false;\n        cc.tween(this.mask)\n            .to(1, { opacity: 0 })\n            .call(() => {\n                this.node.active = false;\n            })\n            .start();\n    }\n\n    public clockSceneFailTransition() {\n        this.node.active = true;\n        this.message.node.active = false;\n        this.mask.opacity = 0;\n        cc.tween(this.mask)\n            .to(1, { opacity: 255 })\n            .delay(1)\n            .call(() => this.node.emit('failTransitionDone'))\n            .to(1, { opacity: 0 })\n            .call(() => {\n                this.node.active = false;\n            })\n            .start();\n    }\n}\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LRmoveMechanism extends cc.Component {\r\n\r\n    private animationState: cc.AnimationState = null;\r\n    \r\n    onLoad() {\r\n        this.node.getComponent(cc.Animation).play('rockMoveUp');\r\n        this.node.getComponent(cc.Animation).on('finished', this.elevatorControl, this);\r\n    }\r\n\r\n    private elevatorControl() {\r\n        if(this.node.getComponent(cc.Animation).currentClip?.name === 'rockMoveUp') {\r\n            this.animationState = this.node.getComponent(cc.Animation).play('rockMoveDown');\r\n            this.node.getComponent(cc.Animation).play('rockMoveDown');\r\n        }else if(this.node.getComponent(cc.Animation).currentClip?.name === 'rockMoveDown') {\r\n            this.animationState = this.node.getComponent(cc.Animation).play('rockMoveUp');\r\n            this.node.getComponent(cc.Animation).play('rockMoveUp');\r\n        }\r\n    }\r\n\r\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        if(other.node.name === \"EnergyRockSkillArea\") {\r\n            this.animationState.speed = 0.25;\r\n        }\r\n    }\r\n\r\n    private onCollisionExit(other: cc.Collider, self: cc.Collider) {\r\n        if(other.node.name === \"EnergyRockSkillArea\") {\r\n            this.animationState.speed = 1;\r\n        }\r\n    }\r\n\r\n\r\n    // update (dt) {}\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class UpDownMoveRockMechanism extends TimeEffect {\r\n    @property\r\n    private movingSpeed: number = 0;\r\n\r\n    @property(cc.Sprite)\r\n    private platform: cc.Sprite = null;\r\n\r\n    private currentTween: cc.Tween = null;\r\n\r\n    onLoad() {\r\n        this.currentTween = cc\r\n            .tween(this.platform.node)\r\n            .repeatForever(cc.tween().to(this.movingSpeed, { y: 300 }).to(this.movingSpeed, { y: 0 }))\r\n            .start();\r\n        (this.currentTween as any)._finalAction._speedMethod = true;\r\n        this.status = 'normal';\r\n    }\r\n\r\n    public accelerate() {\r\n        this.changeMovingSpeed(false);\r\n    }\r\n\r\n    public slowdown() {\r\n        this.changeMovingSpeed(true);\r\n    }\r\n\r\n    public rollback() {}\r\n\r\n    public reset() {\r\n        this.changeMovingSpeed(true, true);\r\n    }\r\n\r\n    private changeMovingSpeed(slowdown: boolean, reset: boolean = false) {\r\n        switch (this.status) {\r\n            case 'normal':\r\n                (this.currentTween as any)._finalAction._speed = slowdown ? 0.3 : 3;\r\n                this.status = slowdown ? 'slowdown' : 'speedup';\r\n                break;\r\n            case 'speedup':\r\n                (this.currentTween as any)._finalAction._speed = slowdown ? 1 : 3;\r\n                this.status = slowdown ? 'normal' : 'speedup';\r\n                break;\r\n            case 'slowdown':\r\n                (this.currentTween as any)._finalAction._speed = slowdown ? 0.3 : 1;\r\n                this.status = slowdown ? 'slowdown' : 'normal';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (reset) {\r\n            (this.currentTween as any)._finalAction._speed = 1;\r\n            this.status = 'normal';\r\n        }\r\n        this.node.emit('status', this.status);\r\n    }\r\n}\r\n","import TimeEffect from '../../../TimeEffect';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class VineMechanism extends TimeEffect {\r\n    @property(cc.Animation)\r\n    private vineAnimation: cc.Animation = null;\r\n    @property(cc.Boolean)\r\n    private vineStatus: boolean = false;\r\n    // TODO: need to add joint point at the root\r\n    @property(cc.AudioClip)\r\n    private sound: cc.AudioClip = null;\r\n\r\n    onLoad() {\r\n        this.status = this.vineStatus === true ? 'triggered' : 'original';\r\n        this.vineAnimation.on('play', () => {\r\n            this.status = 'transforming';\r\n            this.node.emit('status', this.status);\r\n        });\r\n        this.vineAnimation.on('finished', () => {\r\n            this.status = this.vineAnimation.currentClip.name === 'vineGrows' ? 'triggered' : 'original';\r\n            this.node.emit('status', this.status);\r\n            const climbCollider: cc.BoxCollider = this.vineAnimation.getComponent(cc.BoxCollider);\r\n            const skillCollider: cc.BoxCollider = this.getComponent(cc.BoxCollider);\r\n            climbCollider.size.height = this.vineAnimation.node.height;\r\n            climbCollider.offset.y = -this.vineAnimation.node.height / 2;\r\n            if (this.vineAnimation.currentClip.name === 'vineGrows') {\r\n                skillCollider.size.height = this.vineAnimation.node.height * 0.8; //animation size's problem\r\n                skillCollider.offset.y = -this.vineAnimation.node.height / 2;\r\n            } else {\r\n                skillCollider.size.height = 150;\r\n                skillCollider.offset.y = -75;\r\n            }\r\n        });\r\n    }\r\n\r\n    public rollback() {\r\n        cc.audioEngine.playEffect(this.sound, false);\r\n        this.vineAnimation.play('vineGrownBack');\r\n    }\r\n\r\n    public accelerate() {\r\n        cc.audioEngine.playEffect(this.sound, false);\r\n        this.vineAnimation.play('vineGrows');\r\n    }\r\n\r\n    public slowdown() {}\r\n\r\n    public reset() {\r\n        if (this.vineStatus) {\r\n            this.status = 'triggered';\r\n            this.vineAnimation.play('vineGrows');\r\n        } else {\r\n            this.status = 'original';\r\n            this.vineAnimation.play('vineGrownBack');\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport TimeEffect from '../TimeEffect'\nimport BossWeapon from './BossWeapon'\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class BossWeaponBody extends TimeEffect {\n\n    onLoad() {\n        this.status = 'normal';\n    }\n\n    public accelerate() {\n        this.node.parent.getComponent(BossWeapon).accelerate();\n    }\n    \n    public slowdown() {\n        this.node.parent.getComponent(BossWeapon).slowdown();\n    }\n\n    public rollback() {\n        this.node.parent.getComponent(BossWeapon).rollback();\n    }\n\n    public reset() {}\n}\n"],"file":"index.js"}